// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_layer_5_6_1_0_32_32_1_input_data_V_address0,
        conv_layer_5_6_1_0_32_32_1_input_data_V_ce0,
        conv_layer_5_6_1_0_32_32_1_input_data_V_q0,
        conv_layer_5_6_1_0_32_32_1_output_data_V_address0,
        conv_layer_5_6_1_0_32_32_1_output_data_V_ce0,
        conv_layer_5_6_1_0_32_32_1_output_data_V_we0,
        conv_layer_5_6_1_0_32_32_1_output_data_V_d0,
        conv_layer_5_6_1_0_32_32_1_W_data_V_address0,
        conv_layer_5_6_1_0_32_32_1_W_data_V_ce0,
        conv_layer_5_6_1_0_32_32_1_W_data_V_q0,
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0,
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0,
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0,
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_d0,
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_layer_5_6_1_0_32_32_1_input_data_V_address0;
output   conv_layer_5_6_1_0_32_32_1_input_data_V_ce0;
input  [15:0] conv_layer_5_6_1_0_32_32_1_input_data_V_q0;
output  [12:0] conv_layer_5_6_1_0_32_32_1_output_data_V_address0;
output   conv_layer_5_6_1_0_32_32_1_output_data_V_ce0;
output   conv_layer_5_6_1_0_32_32_1_output_data_V_we0;
output  [15:0] conv_layer_5_6_1_0_32_32_1_output_data_V_d0;
output  [7:0] conv_layer_5_6_1_0_32_32_1_W_data_V_address0;
output   conv_layer_5_6_1_0_32_32_1_W_data_V_ce0;
input  [15:0] conv_layer_5_6_1_0_32_32_1_W_data_V_q0;
output  [9:0] conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0;
output   conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0;
output   conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0;
output  [15:0] conv_layer_5_6_1_0_32_32_1_inpad_data_V_d0;
input  [15:0] conv_layer_5_6_1_0_32_32_1_inpad_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_layer_5_6_1_0_32_32_1_output_data_V_ce0;
reg conv_layer_5_6_1_0_32_32_1_output_data_V_we0;
reg conv_layer_5_6_1_0_32_32_1_W_data_V_ce0;
reg[9:0] conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0;
reg conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0;
reg conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] phi_mul_cast_fu_243_p1;
reg   [8:0] phi_mul_cast_reg_505;
wire    ap_CS_fsm_state3;
wire   [13:0] phi_mul1_cast_fu_247_p1;
reg   [13:0] phi_mul1_cast_reg_510;
wire   [12:0] next_mul2_fu_251_p2;
reg   [12:0] next_mul2_reg_515;
wire   [7:0] next_mul_fu_257_p2;
reg   [7:0] next_mul_reg_520;
wire   [2:0] idx_filter_fu_269_p2;
reg   [2:0] idx_filter_reg_528;
wire   [10:0] v_4_cast1_fu_275_p1;
reg   [10:0] v_4_cast1_reg_533;
wire    ap_CS_fsm_state4;
wire   [31:0] v_4_cast9_fu_279_p1;
reg   [31:0] v_4_cast9_reg_538;
wire   [4:0] idx_y_fu_293_p2;
reg   [4:0] idx_y_reg_546;
wire   [31:0] tmp_107_cast_fu_305_p1;
reg   [31:0] tmp_107_cast_reg_551;
wire   [0:0] exitcond3_fu_287_p2;
wire   [31:0] ho_2_cast6_fu_309_p1;
reg   [31:0] ho_2_cast6_reg_556;
wire    ap_CS_fsm_state5;
wire   [4:0] idx_x_fu_323_p2;
reg   [4:0] idx_x_reg_565;
wire   [31:0] tmp_109_cast_fu_335_p1;
reg   [31:0] tmp_109_cast_reg_570;
wire   [0:0] exitcond2_fu_317_p2;
wire   [8:0] tmp_68_fu_438_p1;
reg   [8:0] tmp_68_reg_581;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_98_fu_393_p2;
wire   [31:0] ho_fu_442_p2;
reg   [31:0] ho_reg_591;
wire   [31:0] v_fu_448_p2;
wire    ap_CS_fsm_state9;
reg  signed [15:0] conv_layer_inpad_da_3_reg_606;
reg  signed [15:0] conv_layer_W_data_V_3_reg_611;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    grp_Padding_fu_235_ap_start;
wire    grp_Padding_fu_235_ap_done;
wire    grp_Padding_fu_235_ap_idle;
wire    grp_Padding_fu_235_ap_ready;
wire   [9:0] grp_Padding_fu_235_out_V_address0;
wire    grp_Padding_fu_235_out_V_ce0;
wire    grp_Padding_fu_235_out_V_we0;
wire   [15:0] grp_Padding_fu_235_out_V_d0;
wire   [9:0] grp_Padding_fu_235_in_V_address0;
wire    grp_Padding_fu_235_in_V_ce0;
reg   [2:0] p_z_assign_reg_109;
wire    ap_CS_fsm_state2;
reg   [7:0] phi_mul_reg_120;
reg   [12:0] phi_mul1_reg_131;
reg   [4:0] v_4_reg_142;
wire   [0:0] exitcond_fu_263_p2;
reg   [4:0] ho_2_reg_154;
wire    ap_CS_fsm_state6;
wire   [0:0] ap_phi_mux_p_z_assign_1_phi_fu_184_p4;
reg   [15:0] p_Val2_s_reg_166;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_97_fu_388_p2;
reg   [0:0] p_z_assign_1_reg_179;
reg   [15:0] p_082_2_reg_192;
reg   [31:0] p_x_assign_5_reg_204;
reg   [15:0] p_Val2_3_reg_214;
reg   [31:0] p_y_assign_5_reg_226;
reg    grp_Padding_fu_235_ap_start_reg;
wire  signed [63:0] tmp_96_fu_383_p1;
wire  signed [63:0] tmp_99_fu_410_p1;
wire   [63:0] tmp_128_cast_fu_468_p1;
wire   [5:0] v_4_cast_fu_283_p1;
wire   [5:0] tmp_s_fu_299_p2;
wire   [5:0] ho_2_cast_fu_313_p1;
wire   [5:0] tmp_93_fu_329_p2;
wire   [9:0] p_shl8_fu_339_p3;
wire   [6:0] p_shl9_fu_351_p3;
wire   [10:0] p_shl8_cast_fu_347_p1;
wire   [10:0] p_shl9_cast_fu_359_p1;
wire   [10:0] tmp_94_fu_363_p2;
wire   [10:0] tmp4_fu_369_p2;
wire  signed [13:0] tmp4_cast_fu_374_p1;
wire   [13:0] tmp_95_fu_378_p2;
wire   [31:0] tmp_fu_398_p2;
wire   [31:0] tmp1_fu_404_p2;
wire   [31:0] p_y_assign_6_fu_415_p2;
wire   [31:0] tmp_67_fu_420_p2;
wire   [31:0] tmp2_fu_426_p2;
wire   [31:0] tmp_100_fu_432_p2;
wire   [8:0] tmp_69_fu_454_p1;
wire   [8:0] tmp_70_fu_458_p2;
wire   [8:0] tmp_101_fu_463_p2;
wire  signed [27:0] grp_fu_496_p3;
wire   [27:0] grp_fu_496_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_Padding_fu_235_ap_start_reg = 1'b0;
end

Padding grp_Padding_fu_235(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_fu_235_ap_start),
    .ap_done(grp_Padding_fu_235_ap_done),
    .ap_idle(grp_Padding_fu_235_ap_idle),
    .ap_ready(grp_Padding_fu_235_ap_ready),
    .out_V_address0(grp_Padding_fu_235_out_V_address0),
    .out_V_ce0(grp_Padding_fu_235_out_V_ce0),
    .out_V_we0(grp_Padding_fu_235_out_V_we0),
    .out_V_d0(grp_Padding_fu_235_out_V_d0),
    .in_V_address0(grp_Padding_fu_235_in_V_address0),
    .in_V_ce0(grp_Padding_fu_235_in_V_ce0),
    .in_V_q0(conv_layer_5_6_1_0_32_32_1_input_data_V_q0)
);

lenet_mac_muladd_16s_16s_28ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
lenet_mac_muladd_16s_16s_28ns_28_1_1_U3(
    .din0(conv_layer_inpad_da_3_reg_606),
    .din1(conv_layer_W_data_V_3_reg_611),
    .din2(grp_fu_496_p2),
    .dout(grp_fu_496_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_fu_235_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Padding_fu_235_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_fu_235_ap_ready == 1'b1)) begin
            grp_Padding_fu_235_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ho_2_reg_154 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 == 1'd1))) begin
        ho_2_reg_154 <= idx_x_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_p_z_assign_1_phi_fu_184_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_082_2_reg_192 <= p_Val2_s_reg_166;
    end else if (((tmp_98_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_082_2_reg_192 <= p_Val2_3_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_97_fu_388_p2 == 1'd1))) begin
        p_Val2_3_reg_214 <= p_082_2_reg_192;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_3_reg_214 <= {{grp_fu_496_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_97_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_s_reg_166 <= p_082_2_reg_192;
    end else if (((exitcond2_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_s_reg_166 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_p_z_assign_1_phi_fu_184_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_5_reg_204 <= v_4_cast9_reg_538;
    end else if (((tmp_98_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_x_assign_5_reg_204 <= v_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_97_fu_388_p2 == 1'd1))) begin
        p_y_assign_5_reg_226 <= ho_2_cast6_reg_556;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_y_assign_5_reg_226 <= ho_reg_591;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_97_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_z_assign_1_reg_179 <= 1'd1;
    end else if (((exitcond2_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_z_assign_1_reg_179 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_z_assign_reg_109 <= idx_filter_reg_528;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_235_ap_done == 1'b1))) begin
        p_z_assign_reg_109 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_131 <= next_mul2_reg_515;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_235_ap_done == 1'b1))) begin
        phi_mul1_reg_131 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_120 <= next_mul_reg_520;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_235_ap_done == 1'b1))) begin
        phi_mul_reg_120 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_4_reg_142 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_317_p2 == 1'd1))) begin
        v_4_reg_142 <= idx_y_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_layer_W_data_V_3_reg_611 <= conv_layer_5_6_1_0_32_32_1_W_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_inpad_da_3_reg_606 <= conv_layer_5_6_1_0_32_32_1_inpad_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ho_2_cast6_reg_556[4 : 0] <= ho_2_cast6_fu_309_p1[4 : 0];
        idx_x_reg_565 <= idx_x_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_98_fu_393_p2 == 1'd1))) begin
        ho_reg_591 <= ho_fu_442_p2;
        tmp_68_reg_581 <= tmp_68_fu_438_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_filter_reg_528 <= idx_filter_fu_269_p2;
        next_mul2_reg_515 <= next_mul2_fu_251_p2;
        next_mul_reg_520 <= next_mul_fu_257_p2;
        phi_mul1_cast_reg_510[12 : 0] <= phi_mul1_cast_fu_247_p1[12 : 0];
        phi_mul_cast_reg_505[7 : 0] <= phi_mul_cast_fu_243_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        idx_y_reg_546 <= idx_y_fu_293_p2;
        v_4_cast1_reg_533[4 : 0] <= v_4_cast1_fu_275_p1[4 : 0];
        v_4_cast9_reg_538[4 : 0] <= v_4_cast9_fu_279_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_107_cast_reg_551[5 : 0] <= tmp_107_cast_fu_305_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_109_cast_reg_570[5 : 0] <= tmp_109_cast_fu_335_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_263_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_263_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_6_1_0_32_32_1_W_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_6_1_0_32_32_1_W_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 = tmp_99_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 = grp_Padding_fu_235_out_V_address0;
    end else begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 = grp_Padding_fu_235_out_V_ce0;
    end else begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0 = grp_Padding_fu_235_out_V_we0;
    end else begin
        conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer_5_6_1_0_32_32_1_output_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_6_1_0_32_32_1_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 == 1'd1))) begin
        conv_layer_5_6_1_0_32_32_1_output_data_V_we0 = 1'b1;
    end else begin
        conv_layer_5_6_1_0_32_32_1_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_fu_235_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_97_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_98_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = p_z_assign_1_reg_179;

assign conv_layer_5_6_1_0_32_32_1_W_data_V_address0 = tmp_128_cast_fu_468_p1;

assign conv_layer_5_6_1_0_32_32_1_inpad_data_V_d0 = grp_Padding_fu_235_out_V_d0;

assign conv_layer_5_6_1_0_32_32_1_input_data_V_address0 = grp_Padding_fu_235_in_V_address0;

assign conv_layer_5_6_1_0_32_32_1_input_data_V_ce0 = grp_Padding_fu_235_in_V_ce0;

assign conv_layer_5_6_1_0_32_32_1_output_data_V_address0 = tmp_96_fu_383_p1;

assign conv_layer_5_6_1_0_32_32_1_output_data_V_d0 = p_Val2_s_reg_166;

assign exitcond2_fu_317_p2 = ((ho_2_reg_154 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_287_p2 = ((v_4_reg_142 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_263_p2 = ((p_z_assign_reg_109 == 3'd6) ? 1'b1 : 1'b0);

assign grp_Padding_fu_235_ap_start = grp_Padding_fu_235_ap_start_reg;

assign grp_fu_496_p2 = {{p_Val2_3_reg_214}, {12'd0}};

assign ho_2_cast6_fu_309_p1 = ho_2_reg_154;

assign ho_2_cast_fu_313_p1 = ho_2_reg_154;

assign ho_fu_442_p2 = (32'd1 + p_y_assign_5_reg_226);

assign idx_filter_fu_269_p2 = (p_z_assign_reg_109 + 3'd1);

assign idx_x_fu_323_p2 = (ho_2_reg_154 + 5'd1);

assign idx_y_fu_293_p2 = (v_4_reg_142 + 5'd1);

assign next_mul2_fu_251_p2 = (phi_mul1_reg_131 + 13'd784);

assign next_mul_fu_257_p2 = (phi_mul_reg_120 + 8'd25);

assign p_shl8_cast_fu_347_p1 = p_shl8_fu_339_p3;

assign p_shl8_fu_339_p3 = {{ho_2_reg_154}, {5'd0}};

assign p_shl9_cast_fu_359_p1 = p_shl9_fu_351_p3;

assign p_shl9_fu_351_p3 = {{ho_2_reg_154}, {2'd0}};

assign p_y_assign_6_fu_415_p2 = (p_y_assign_5_reg_226 - ho_2_cast6_reg_556);

assign phi_mul1_cast_fu_247_p1 = phi_mul1_reg_131;

assign phi_mul_cast_fu_243_p1 = phi_mul_reg_120;

assign tmp1_fu_404_p2 = (p_x_assign_5_reg_204 + tmp_fu_398_p2);

assign tmp2_fu_426_p2 = (tmp_67_fu_420_p2 + p_y_assign_6_fu_415_p2);

assign tmp4_cast_fu_374_p1 = $signed(tmp4_fu_369_p2);

assign tmp4_fu_369_p2 = (tmp_94_fu_363_p2 + v_4_cast1_reg_533);

assign tmp_100_fu_432_p2 = (p_x_assign_5_reg_204 + tmp2_fu_426_p2);

assign tmp_101_fu_463_p2 = (tmp_70_fu_458_p2 + phi_mul_cast_reg_505);

assign tmp_107_cast_fu_305_p1 = tmp_s_fu_299_p2;

assign tmp_109_cast_fu_335_p1 = tmp_93_fu_329_p2;

assign tmp_128_cast_fu_468_p1 = tmp_101_fu_463_p2;

assign tmp_67_fu_420_p2 = p_y_assign_6_fu_415_p2 << 32'd2;

assign tmp_68_fu_438_p1 = tmp_100_fu_432_p2[8:0];

assign tmp_69_fu_454_p1 = v_4_reg_142;

assign tmp_70_fu_458_p2 = (tmp_68_reg_581 - tmp_69_fu_454_p1);

assign tmp_93_fu_329_p2 = (ho_2_cast_fu_313_p1 + 6'd5);

assign tmp_94_fu_363_p2 = (p_shl8_cast_fu_347_p1 - p_shl9_cast_fu_359_p1);

assign tmp_95_fu_378_p2 = ($signed(phi_mul1_cast_reg_510) + $signed(tmp4_cast_fu_374_p1));

assign tmp_96_fu_383_p1 = $signed(tmp_95_fu_378_p2);

assign tmp_97_fu_388_p2 = (($signed(p_x_assign_5_reg_204) < $signed(tmp_107_cast_reg_551)) ? 1'b1 : 1'b0);

assign tmp_98_fu_393_p2 = (($signed(p_y_assign_5_reg_226) < $signed(tmp_109_cast_reg_570)) ? 1'b1 : 1'b0);

assign tmp_99_fu_410_p1 = $signed(tmp1_fu_404_p2);

assign tmp_fu_398_p2 = p_y_assign_5_reg_226 << 32'd5;

assign tmp_s_fu_299_p2 = (v_4_cast_fu_283_p1 + 6'd5);

assign v_4_cast1_fu_275_p1 = v_4_reg_142;

assign v_4_cast9_fu_279_p1 = v_4_reg_142;

assign v_4_cast_fu_283_p1 = v_4_reg_142;

assign v_fu_448_p2 = (p_x_assign_5_reg_204 + 32'd1);

always @ (posedge ap_clk) begin
    phi_mul_cast_reg_505[8] <= 1'b0;
    phi_mul1_cast_reg_510[13] <= 1'b0;
    v_4_cast1_reg_533[10:5] <= 6'b000000;
    v_4_cast9_reg_538[31:5] <= 27'b000000000000000000000000000;
    tmp_107_cast_reg_551[31:6] <= 26'b00000000000000000000000000;
    ho_2_cast6_reg_556[31:5] <= 27'b000000000000000000000000000;
    tmp_109_cast_reg_570[31:6] <= 26'b00000000000000000000000000;
end

endmodule //forward_conv
