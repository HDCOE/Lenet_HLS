// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_layer_5_120_1_0_5_5_16_input_data_V_address0,
        conv_layer_5_120_1_0_5_5_16_input_data_V_ce0,
        conv_layer_5_120_1_0_5_5_16_input_data_V_q0,
        conv_layer_5_120_1_0_5_5_16_output_data_V_address0,
        conv_layer_5_120_1_0_5_5_16_output_data_V_ce0,
        conv_layer_5_120_1_0_5_5_16_output_data_V_we0,
        conv_layer_5_120_1_0_5_5_16_output_data_V_d0,
        conv_layer_5_120_1_0_5_5_16_W_data_V_address0,
        conv_layer_5_120_1_0_5_5_16_W_data_V_ce0,
        conv_layer_5_120_1_0_5_5_16_W_data_V_q0,
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0,
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0,
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0,
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_d0,
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] conv_layer_5_120_1_0_5_5_16_input_data_V_address0;
output   conv_layer_5_120_1_0_5_5_16_input_data_V_ce0;
input  [15:0] conv_layer_5_120_1_0_5_5_16_input_data_V_q0;
output  [6:0] conv_layer_5_120_1_0_5_5_16_output_data_V_address0;
output   conv_layer_5_120_1_0_5_5_16_output_data_V_ce0;
output   conv_layer_5_120_1_0_5_5_16_output_data_V_we0;
output  [15:0] conv_layer_5_120_1_0_5_5_16_output_data_V_d0;
output  [15:0] conv_layer_5_120_1_0_5_5_16_W_data_V_address0;
output   conv_layer_5_120_1_0_5_5_16_W_data_V_ce0;
input  [15:0] conv_layer_5_120_1_0_5_5_16_W_data_V_q0;
output  [8:0] conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0;
output   conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0;
output   conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0;
output  [15:0] conv_layer_5_120_1_0_5_5_16_inpad_data_V_d0;
input  [15:0] conv_layer_5_120_1_0_5_5_16_inpad_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_layer_5_120_1_0_5_5_16_output_data_V_ce0;
reg conv_layer_5_120_1_0_5_5_16_output_data_V_we0;
reg conv_layer_5_120_1_0_5_5_16_W_data_V_ce0;
reg[8:0] conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0;
reg conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0;
reg conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] next_mul2_fu_264_p2;
reg   [15:0] next_mul2_reg_517;
wire    ap_CS_fsm_state3;
wire   [6:0] idx_filter_fu_276_p2;
reg   [6:0] idx_filter_reg_525;
wire   [8:0] v_6_cast9_fu_282_p1;
reg   [8:0] v_6_cast9_reg_530;
wire    ap_CS_fsm_state4;
wire   [2:0] v_6_cast_fu_286_p1;
reg   [2:0] v_6_cast_reg_535;
wire   [2:0] ho_4_cast_fu_296_p1;
reg   [2:0] ho_4_cast_reg_543;
wire    ap_CS_fsm_state5;
wire   [0:0] idx_y_fu_306_p2;
wire   [0:0] exitcond6_fu_300_p2;
wire   [2:0] indvars_iv_next3_fu_312_p2;
wire   [8:0] next_mul_fu_318_p2;
reg   [8:0] next_mul_reg_562;
wire    ap_CS_fsm_state6;
wire   [4:0] ch_fu_330_p2;
reg   [4:0] ch_reg_570;
wire   [0:0] idx_x_fu_357_p2;
wire   [0:0] exitcond5_fu_324_p2;
wire   [2:0] indvars_iv_next_fu_363_p2;
wire   [8:0] p_x_assign_8_fu_379_p2;
reg   [8:0] p_x_assign_8_reg_588;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond4_fu_373_p2;
wire   [8:0] tmp_76_fu_412_p2;
reg   [8:0] tmp_76_reg_597;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond1_fu_389_p2;
wire   [8:0] tmp_79_fu_450_p2;
reg   [8:0] tmp_79_reg_602;
wire   [2:0] ho_fu_455_p2;
reg   [2:0] ho_reg_607;
wire   [2:0] v_fu_461_p2;
wire    ap_CS_fsm_state9;
reg  signed [15:0] conv_layer_inpad_da_1_reg_627;
wire    ap_CS_fsm_state10;
reg  signed [15:0] conv_layer_W_data_V_1_reg_632;
wire    ap_CS_fsm_state11;
wire    grp_Padding_2_fu_256_ap_start;
wire    grp_Padding_2_fu_256_ap_done;
wire    grp_Padding_2_fu_256_ap_idle;
wire    grp_Padding_2_fu_256_ap_ready;
wire   [8:0] grp_Padding_2_fu_256_out_V_address0;
wire    grp_Padding_2_fu_256_out_V_ce0;
wire    grp_Padding_2_fu_256_out_V_we0;
wire   [15:0] grp_Padding_2_fu_256_out_V_d0;
wire   [8:0] grp_Padding_2_fu_256_in_V_address0;
wire    grp_Padding_2_fu_256_in_V_ce0;
reg   [6:0] p_z_assign_reg_105;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond7_fu_290_p2;
reg   [15:0] phi_mul1_reg_117;
reg   [2:0] indvars_iv2_reg_129;
wire   [0:0] exitcond_fu_270_p2;
reg   [0:0] v_2_reg_141;
reg   [2:0] indvars_iv_reg_153;
reg   [0:0] ho_1_reg_165;
reg   [15:0] p_Val2_s_reg_177;
reg   [4:0] p_z_assign_3_reg_190;
reg   [8:0] phi_mul_reg_201;
reg   [15:0] p_082_2_reg_213;
reg   [2:0] p_x_assign_7_reg_225;
reg   [15:0] p_Val2_3_reg_235;
reg   [2:0] p_y_assign_9_reg_247;
reg    grp_Padding_2_fu_256_ap_start_reg;
wire   [63:0] tmp_75_fu_352_p1;
wire   [63:0] tmp_105_cast_fu_480_p1;
wire   [63:0] tmp_77_fu_467_p1;
wire   [0:0] tmp3_fu_336_p2;
wire   [6:0] tmp3_cast_fu_342_p1;
wire   [6:0] tmp_s_fu_346_p2;
wire   [8:0] p_x_assign_9_cast7_fu_369_p1;
wire   [4:0] p_shl5_fu_395_p3;
wire   [8:0] p_shl5_cast_fu_403_p1;
wire   [8:0] tmp1_fu_407_p2;
wire   [8:0] p_y_assign_9_cast6_fu_385_p1;
wire   [2:0] p_y_assign_s_fu_418_p2;
wire   [4:0] p_shl_fu_427_p3;
wire   [8:0] p_shl_cast_fu_435_p1;
wire   [8:0] tmp2_fu_439_p2;
wire   [8:0] p_y_assign_10_cast4_fu_423_p1;
wire   [8:0] tmp_78_fu_444_p2;
wire   [15:0] tmp_103_cast_fu_471_p1;
wire   [15:0] tmp_80_fu_474_p2;
wire  signed [27:0] grp_fu_508_p3;
wire   [27:0] grp_fu_508_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_Padding_2_fu_256_ap_start_reg = 1'b0;
end

Padding_2 grp_Padding_2_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_2_fu_256_ap_start),
    .ap_done(grp_Padding_2_fu_256_ap_done),
    .ap_idle(grp_Padding_2_fu_256_ap_idle),
    .ap_ready(grp_Padding_2_fu_256_ap_ready),
    .out_V_address0(grp_Padding_2_fu_256_out_V_address0),
    .out_V_ce0(grp_Padding_2_fu_256_out_V_ce0),
    .out_V_we0(grp_Padding_2_fu_256_out_V_we0),
    .out_V_d0(grp_Padding_2_fu_256_out_V_d0),
    .in_V_address0(grp_Padding_2_fu_256_in_V_address0),
    .in_V_ce0(grp_Padding_2_fu_256_in_V_ce0),
    .in_V_q0(conv_layer_5_120_1_0_5_5_16_input_data_V_q0)
);

lenet_mac_muladd_16s_16s_28ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
lenet_mac_muladd_16s_16s_28ns_28_1_1_U42(
    .din0(conv_layer_W_data_V_1_reg_632),
    .din1(conv_layer_inpad_da_1_reg_627),
    .din2(grp_fu_508_p2),
    .dout(grp_fu_508_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_2_fu_256_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Padding_2_fu_256_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_2_fu_256_ap_ready == 1'b1)) begin
            grp_Padding_2_fu_256_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_290_p2 == 1'd0))) begin
        ho_1_reg_165 <= 1'd0;
    end else if (((exitcond5_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ho_1_reg_165 <= idx_x_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_270_p2 == 1'd0))) begin
        indvars_iv2_reg_129 <= 3'd5;
    end else if (((exitcond6_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indvars_iv2_reg_129 <= indvars_iv_next3_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_290_p2 == 1'd0))) begin
        indvars_iv_reg_153 <= 3'd5;
    end else if (((exitcond5_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv_reg_153 <= indvars_iv_next_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_324_p2 == 1'd0))) begin
        p_082_2_reg_213 <= p_Val2_s_reg_177;
    end else if (((exitcond1_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_082_2_reg_213 <= p_Val2_3_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_373_p2 == 1'd0))) begin
        p_Val2_3_reg_235 <= p_082_2_reg_213;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_3_reg_235 <= {{grp_fu_508_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_s_reg_177 <= 16'd0;
    end else if (((exitcond4_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_s_reg_177 <= p_082_2_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_324_p2 == 1'd0))) begin
        p_x_assign_7_reg_225 <= v_6_cast_reg_535;
    end else if (((exitcond1_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        p_x_assign_7_reg_225 <= v_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_373_p2 == 1'd0))) begin
        p_y_assign_9_reg_247 <= ho_4_cast_reg_543;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_y_assign_9_reg_247 <= ho_reg_607;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_z_assign_3_reg_190 <= 5'd0;
    end else if (((exitcond4_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        p_z_assign_3_reg_190 <= ch_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_z_assign_reg_105 <= idx_filter_reg_525;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_2_fu_256_ap_done == 1'b1))) begin
        p_z_assign_reg_105 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_117 <= next_mul2_reg_517;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_2_fu_256_ap_done == 1'b1))) begin
        phi_mul1_reg_117 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_201 <= 9'd0;
    end else if (((exitcond4_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_reg_201 <= next_mul_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_270_p2 == 1'd0))) begin
        v_2_reg_141 <= 1'd0;
    end else if (((exitcond6_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        v_2_reg_141 <= idx_y_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ch_reg_570 <= ch_fu_330_p2;
        next_mul_reg_562 <= next_mul_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_layer_W_data_V_1_reg_632 <= conv_layer_5_120_1_0_5_5_16_W_data_V_q0;
        conv_layer_inpad_da_1_reg_627 <= conv_layer_5_120_1_0_5_5_16_inpad_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ho_4_cast_reg_543[0] <= ho_4_cast_fu_296_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_389_p2 == 1'd0))) begin
        ho_reg_607 <= ho_fu_455_p2;
        tmp_76_reg_597 <= tmp_76_fu_412_p2;
        tmp_79_reg_602 <= tmp_79_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_filter_reg_525 <= idx_filter_fu_276_p2;
        next_mul2_reg_517 <= next_mul2_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond4_fu_373_p2 == 1'd0))) begin
        p_x_assign_8_reg_588 <= p_x_assign_8_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_6_cast9_reg_530[0] <= v_6_cast9_fu_282_p1[0];
        v_6_cast_reg_535[0] <= v_6_cast_fu_286_p1[0];
    end
end

always @ (*) begin
    if ((((exitcond_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_120_1_0_5_5_16_W_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_120_1_0_5_5_16_W_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 = tmp_77_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 = grp_Padding_2_fu_256_out_V_address0;
    end else begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 = grp_Padding_2_fu_256_out_V_ce0;
    end else begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0 = grp_Padding_2_fu_256_out_V_we0;
    end else begin
        conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer_5_120_1_0_5_5_16_output_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_120_1_0_5_5_16_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        conv_layer_5_120_1_0_5_5_16_output_data_V_we0 = 1'b1;
    end else begin
        conv_layer_5_120_1_0_5_5_16_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_2_fu_256_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond7_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond6_fu_300_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond5_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond4_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond1_fu_389_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ch_fu_330_p2 = (p_z_assign_3_reg_190 + 5'd1);

assign conv_layer_5_120_1_0_5_5_16_W_data_V_address0 = tmp_105_cast_fu_480_p1;

assign conv_layer_5_120_1_0_5_5_16_inpad_data_V_d0 = grp_Padding_2_fu_256_out_V_d0;

assign conv_layer_5_120_1_0_5_5_16_input_data_V_address0 = grp_Padding_2_fu_256_in_V_address0;

assign conv_layer_5_120_1_0_5_5_16_input_data_V_ce0 = grp_Padding_2_fu_256_in_V_ce0;

assign conv_layer_5_120_1_0_5_5_16_output_data_V_address0 = tmp_75_fu_352_p1;

assign conv_layer_5_120_1_0_5_5_16_output_data_V_d0 = p_Val2_s_reg_177;

assign exitcond1_fu_389_p2 = ((p_y_assign_9_reg_247 == indvars_iv_reg_153) ? 1'b1 : 1'b0);

assign exitcond4_fu_373_p2 = ((p_x_assign_7_reg_225 == indvars_iv2_reg_129) ? 1'b1 : 1'b0);

assign exitcond5_fu_324_p2 = ((p_z_assign_3_reg_190 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond6_fu_300_p2 = ((indvars_iv_reg_153 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond7_fu_290_p2 = ((indvars_iv2_reg_129 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_270_p2 = ((p_z_assign_reg_105 == 7'd120) ? 1'b1 : 1'b0);

assign grp_Padding_2_fu_256_ap_start = grp_Padding_2_fu_256_ap_start_reg;

assign grp_fu_508_p2 = {{p_Val2_3_reg_235}, {12'd0}};

assign ho_4_cast_fu_296_p1 = ho_1_reg_165;

assign ho_fu_455_p2 = (p_y_assign_9_reg_247 + 3'd1);

assign idx_filter_fu_276_p2 = (p_z_assign_reg_105 + 7'd1);

assign idx_x_fu_357_p2 = (ho_1_reg_165 ^ 1'd1);

assign idx_y_fu_306_p2 = (v_2_reg_141 ^ 1'd1);

assign indvars_iv_next3_fu_312_p2 = (indvars_iv2_reg_129 + 3'd1);

assign indvars_iv_next_fu_363_p2 = (indvars_iv_reg_153 + 3'd1);

assign next_mul2_fu_264_p2 = (phi_mul1_reg_117 + 16'd400);

assign next_mul_fu_318_p2 = (phi_mul_reg_201 + 9'd25);

assign p_shl5_cast_fu_403_p1 = p_shl5_fu_395_p3;

assign p_shl5_fu_395_p3 = {{p_y_assign_9_reg_247}, {2'd0}};

assign p_shl_cast_fu_435_p1 = p_shl_fu_427_p3;

assign p_shl_fu_427_p3 = {{p_y_assign_s_fu_418_p2}, {2'd0}};

assign p_x_assign_8_fu_379_p2 = (p_x_assign_9_cast7_fu_369_p1 + phi_mul_reg_201);

assign p_x_assign_9_cast7_fu_369_p1 = p_x_assign_7_reg_225;

assign p_y_assign_10_cast4_fu_423_p1 = p_y_assign_s_fu_418_p2;

assign p_y_assign_9_cast6_fu_385_p1 = p_y_assign_9_reg_247;

assign p_y_assign_s_fu_418_p2 = (p_y_assign_9_reg_247 - ho_4_cast_reg_543);

assign tmp1_fu_407_p2 = (p_shl5_cast_fu_403_p1 + p_x_assign_8_reg_588);

assign tmp2_fu_439_p2 = (p_shl_cast_fu_435_p1 + p_x_assign_8_reg_588);

assign tmp3_cast_fu_342_p1 = tmp3_fu_336_p2;

assign tmp3_fu_336_p2 = (v_2_reg_141 ^ ho_1_reg_165);

assign tmp_103_cast_fu_471_p1 = tmp_79_reg_602;

assign tmp_105_cast_fu_480_p1 = tmp_80_fu_474_p2;

assign tmp_75_fu_352_p1 = tmp_s_fu_346_p2;

assign tmp_76_fu_412_p2 = (tmp1_fu_407_p2 + p_y_assign_9_cast6_fu_385_p1);

assign tmp_77_fu_467_p1 = tmp_76_reg_597;

assign tmp_78_fu_444_p2 = (tmp2_fu_439_p2 + p_y_assign_10_cast4_fu_423_p1);

assign tmp_79_fu_450_p2 = (tmp_78_fu_444_p2 - v_6_cast9_reg_530);

assign tmp_80_fu_474_p2 = (tmp_103_cast_fu_471_p1 + phi_mul1_reg_117);

assign tmp_s_fu_346_p2 = (tmp3_cast_fu_342_p1 + p_z_assign_reg_105);

assign v_6_cast9_fu_282_p1 = v_2_reg_141;

assign v_6_cast_fu_286_p1 = v_2_reg_141;

assign v_fu_461_p2 = (p_x_assign_7_reg_225 + 3'd1);

always @ (posedge ap_clk) begin
    v_6_cast9_reg_530[8:1] <= 8'b00000000;
    v_6_cast_reg_535[2:1] <= 2'b00;
    ho_4_cast_reg_543[2:1] <= 2'b00;
end

endmodule //forward_conv_2
