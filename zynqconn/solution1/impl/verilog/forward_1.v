// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pool_layer_2_2_1_10_10_16_input_data_V_address0,
        pool_layer_2_2_1_10_10_16_input_data_V_ce0,
        pool_layer_2_2_1_10_10_16_input_data_V_q0,
        pool_layer_2_2_1_10_10_16_output_data_V_address0,
        pool_layer_2_2_1_10_10_16_output_data_V_ce0,
        pool_layer_2_2_1_10_10_16_output_data_V_we0,
        pool_layer_2_2_1_10_10_16_output_data_V_d0,
        pool_layer_2_2_1_10_10_16_output_data_V_q0,
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0,
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_ce0,
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_we0,
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_d0,
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_q0,
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0,
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_ce0,
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_we0,
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_d0,
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] pool_layer_2_2_1_10_10_16_input_data_V_address0;
output   pool_layer_2_2_1_10_10_16_input_data_V_ce0;
input  [15:0] pool_layer_2_2_1_10_10_16_input_data_V_q0;
output  [8:0] pool_layer_2_2_1_10_10_16_output_data_V_address0;
output   pool_layer_2_2_1_10_10_16_output_data_V_ce0;
output   pool_layer_2_2_1_10_10_16_output_data_V_we0;
output  [15:0] pool_layer_2_2_1_10_10_16_output_data_V_d0;
input  [15:0] pool_layer_2_2_1_10_10_16_output_data_V_q0;
output  [8:0] pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0;
output   pool_layer_2_2_1_10_10_16_relu1_input_data_V_ce0;
output   pool_layer_2_2_1_10_10_16_relu1_input_data_V_we0;
output  [15:0] pool_layer_2_2_1_10_10_16_relu1_input_data_V_d0;
input  [15:0] pool_layer_2_2_1_10_10_16_relu1_input_data_V_q0;
output  [8:0] pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0;
output   pool_layer_2_2_1_10_10_16_relu1_output_data_V_ce0;
output   pool_layer_2_2_1_10_10_16_relu1_output_data_V_we0;
output  [14:0] pool_layer_2_2_1_10_10_16_relu1_output_data_V_d0;
input  [14:0] pool_layer_2_2_1_10_10_16_relu1_output_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] pool_layer_2_2_1_10_10_16_output_data_V_address0;
reg pool_layer_2_2_1_10_10_16_output_data_V_ce0;
reg pool_layer_2_2_1_10_10_16_output_data_V_we0;
reg[15:0] pool_layer_2_2_1_10_10_16_output_data_V_d0;
reg[8:0] pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0;
reg pool_layer_2_2_1_10_10_16_relu1_input_data_V_ce0;
reg pool_layer_2_2_1_10_10_16_relu1_input_data_V_we0;
reg[8:0] pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0;
reg pool_layer_2_2_1_10_10_16_relu1_output_data_V_ce0;
reg pool_layer_2_2_1_10_10_16_relu1_output_data_V_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] p_i0_0_i_cast7_fu_188_p1;
reg   [63:0] p_i0_0_i_cast7_reg_331;
wire    ap_CS_fsm_state3;
wire   [8:0] p_i0_fu_199_p2;
reg   [8:0] p_i0_reg_339;
wire   [0:0] tmp_fu_193_p2;
wire   [8:0] p_x_assign_cast6_fu_205_p1;
reg   [8:0] p_x_assign_cast6_reg_349;
wire    ap_CS_fsm_state5;
wire   [2:0] ix_fu_215_p2;
reg   [2:0] ix_reg_357;
wire   [2:0] iy_fu_231_p2;
reg   [2:0] iy_reg_365;
wire    ap_CS_fsm_state6;
wire   [8:0] tmp1_cast_fu_251_p1;
reg   [8:0] tmp1_cast_reg_370;
wire   [0:0] exitcond2_i_fu_225_p2;
wire   [4:0] iz_fu_261_p2;
reg   [4:0] iz_reg_378;
wire    ap_CS_fsm_state7;
wire   [8:0] next_mul_fu_267_p2;
reg   [8:0] next_mul_reg_383;
wire   [0:0] exitcond_i_fu_255_p2;
wire   [63:0] tmp_4_i_fu_283_p1;
reg   [63:0] tmp_4_i_reg_388;
wire   [63:0] p_i0_0_i1_cast3_fu_309_p1;
reg   [63:0] p_i0_0_i1_cast3_reg_398;
wire    ap_CS_fsm_state9;
wire   [8:0] p_i0_2_fu_320_p2;
reg   [8:0] p_i0_2_reg_406;
wire   [0:0] tmp_s_fu_314_p2;
wire    grp_forward_pool_1_fu_180_ap_start;
wire    grp_forward_pool_1_fu_180_ap_done;
wire    grp_forward_pool_1_fu_180_ap_idle;
wire    grp_forward_pool_1_fu_180_ap_ready;
wire   [10:0] grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_address0;
wire    grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_ce0;
wire   [8:0] grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_address0;
wire    grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_ce0;
wire    grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_we0;
wire   [15:0] grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_d0;
reg   [8:0] p_i0_0_i_reg_114;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [2:0] p_x_assign_reg_125;
reg   [2:0] p_y_assign_reg_136;
wire   [0:0] exitcond1_i_fu_209_p2;
reg   [4:0] p_z_assign_reg_147;
wire    ap_CS_fsm_state8;
reg   [8:0] phi_mul_reg_158;
reg   [8:0] p_i0_0_i1_reg_169;
wire    ap_CS_fsm_state10;
reg    grp_forward_pool_1_fu_180_ap_start_reg;
wire   [15:0] extLd_fu_326_p1;
wire   [4:0] p_y_assign_cast5_fu_221_p1;
wire   [4:0] p_shl_i_fu_237_p3;
wire   [4:0] tmp1_fu_245_p2;
wire   [8:0] tmp2_fu_273_p2;
wire   [8:0] tmp_3_i_fu_278_p2;
wire   [0:0] tmp_78_fu_292_p3;
wire   [14:0] tmp_77_fu_288_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_forward_pool_1_fu_180_ap_start_reg = 1'b0;
end

forward_pool_1 grp_forward_pool_1_fu_180(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_forward_pool_1_fu_180_ap_start),
    .ap_done(grp_forward_pool_1_fu_180_ap_done),
    .ap_idle(grp_forward_pool_1_fu_180_ap_idle),
    .ap_ready(grp_forward_pool_1_fu_180_ap_ready),
    .pool_layer_2_2_1_10_10_16_input_data_V_address0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_address0),
    .pool_layer_2_2_1_10_10_16_input_data_V_ce0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_ce0),
    .pool_layer_2_2_1_10_10_16_input_data_V_q0(pool_layer_2_2_1_10_10_16_input_data_V_q0),
    .pool_layer_2_2_1_10_10_16_output_data_V_address0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_address0),
    .pool_layer_2_2_1_10_10_16_output_data_V_ce0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_ce0),
    .pool_layer_2_2_1_10_10_16_output_data_V_we0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_we0),
    .pool_layer_2_2_1_10_10_16_output_data_V_d0(grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_forward_pool_1_fu_180_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_forward_pool_1_fu_180_ap_start_reg <= 1'b1;
        end else if ((grp_forward_pool_1_fu_180_ap_ready == 1'b1)) begin
            grp_forward_pool_1_fu_180_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_209_p2 == 1'd1))) begin
        p_i0_0_i1_reg_169 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_i0_0_i1_reg_169 <= p_i0_2_reg_406;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_i0_0_i_reg_114 <= p_i0_reg_339;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_forward_pool_1_fu_180_ap_done == 1'b1))) begin
        p_i0_0_i_reg_114 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_x_assign_reg_125 <= 3'd0;
    end else if (((exitcond2_i_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_reg_125 <= ix_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_y_assign_reg_136 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_i_fu_255_p2 == 1'd1))) begin
        p_y_assign_reg_136 <= iy_reg_365;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_z_assign_reg_147 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_z_assign_reg_147 <= iz_reg_378;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_158 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_158 <= next_mul_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ix_reg_357 <= ix_fu_215_p2;
        p_x_assign_cast6_reg_349[2 : 0] <= p_x_assign_cast6_fu_205_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        iy_reg_365 <= iy_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        iz_reg_378 <= iz_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        next_mul_reg_383 <= next_mul_fu_267_p2;
        tmp_4_i_reg_388[8 : 0] <= tmp_4_i_fu_283_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_i0_0_i1_cast3_reg_398[8 : 0] <= p_i0_0_i1_cast3_fu_309_p1[8 : 0];
        p_i0_2_reg_406 <= p_i0_2_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_i0_0_i_cast7_reg_331[8 : 0] <= p_i0_0_i_cast7_fu_188_p1[8 : 0];
        p_i0_reg_339 <= p_i0_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp1_cast_reg_370[4 : 0] <= tmp1_cast_fu_251_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_314_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_314_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_address0 = p_i0_0_i1_cast3_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_address0 = p_i0_0_i_cast7_fu_188_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_address0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_address0;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10))) begin
        pool_layer_2_2_1_10_10_16_output_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_ce0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_ce0;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_d0 = extLd_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_d0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_d0;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_we0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_output_data_V_we0;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0 = tmp_4_i_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0 = p_i0_0_i_cast7_reg_331;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7))) begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_ce0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_we0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_input_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0 = p_i0_0_i1_cast3_fu_309_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0 = tmp_4_i_reg_388;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_ce0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_we0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_relu1_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_forward_pool_1_fu_180_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_i_fu_209_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond2_i_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_i_fu_255_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_s_fu_314_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_i_fu_209_p2 = ((p_x_assign_reg_125 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_225_p2 = ((p_y_assign_reg_136 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_i_fu_255_p2 = ((p_z_assign_reg_147 == 5'd16) ? 1'b1 : 1'b0);

assign extLd_fu_326_p1 = pool_layer_2_2_1_10_10_16_relu1_output_data_V_q0;

assign grp_forward_pool_1_fu_180_ap_start = grp_forward_pool_1_fu_180_ap_start_reg;

assign ix_fu_215_p2 = (p_x_assign_reg_125 + 3'd1);

assign iy_fu_231_p2 = (p_y_assign_reg_136 + 3'd1);

assign iz_fu_261_p2 = (p_z_assign_reg_147 + 5'd1);

assign next_mul_fu_267_p2 = (9'd25 + phi_mul_reg_158);

assign p_i0_0_i1_cast3_fu_309_p1 = p_i0_0_i1_reg_169;

assign p_i0_0_i_cast7_fu_188_p1 = p_i0_0_i_reg_114;

assign p_i0_2_fu_320_p2 = (p_i0_0_i1_reg_169 + 9'd1);

assign p_i0_fu_199_p2 = (p_i0_0_i_reg_114 + 9'd1);

assign p_shl_i_fu_237_p3 = {{p_y_assign_reg_136}, {2'd0}};

assign p_x_assign_cast6_fu_205_p1 = p_x_assign_reg_125;

assign p_y_assign_cast5_fu_221_p1 = p_y_assign_reg_136;

assign pool_layer_2_2_1_10_10_16_input_data_V_address0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_address0;

assign pool_layer_2_2_1_10_10_16_input_data_V_ce0 = grp_forward_pool_1_fu_180_pool_layer_2_2_1_10_10_16_input_data_V_ce0;

assign pool_layer_2_2_1_10_10_16_relu1_input_data_V_d0 = pool_layer_2_2_1_10_10_16_output_data_V_q0;

assign pool_layer_2_2_1_10_10_16_relu1_output_data_V_d0 = ((tmp_78_fu_292_p3[0:0] === 1'b1) ? 15'd0 : tmp_77_fu_288_p1);

assign tmp1_cast_fu_251_p1 = tmp1_fu_245_p2;

assign tmp1_fu_245_p2 = (p_y_assign_cast5_fu_221_p1 + p_shl_i_fu_237_p3);

assign tmp2_fu_273_p2 = (p_x_assign_cast6_reg_349 + phi_mul_reg_158);

assign tmp_3_i_fu_278_p2 = (tmp2_fu_273_p2 + tmp1_cast_reg_370);

assign tmp_4_i_fu_283_p1 = tmp_3_i_fu_278_p2;

assign tmp_77_fu_288_p1 = pool_layer_2_2_1_10_10_16_relu1_input_data_V_q0[14:0];

assign tmp_78_fu_292_p3 = pool_layer_2_2_1_10_10_16_relu1_input_data_V_q0[32'd15];

assign tmp_fu_193_p2 = ((p_i0_0_i_reg_114 == 9'd400) ? 1'b1 : 1'b0);

assign tmp_s_fu_314_p2 = ((p_i0_0_i1_reg_169 == 9'd400) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    p_i0_0_i_cast7_reg_331[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    p_x_assign_cast6_reg_349[8:3] <= 6'b000000;
    tmp1_cast_reg_370[8:5] <= 4'b0000;
    tmp_4_i_reg_388[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    p_i0_0_i1_cast3_reg_398[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //forward_1
