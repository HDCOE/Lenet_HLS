-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal idx_6_fu_152_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_6_reg_236 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_z_phi_fu_90_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_1_reg_244 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_174_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_249 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_182_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_reg_254 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_next_fu_188_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_1_fu_204_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_1_reg_267 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_210_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_4_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_4_reg_282 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_next2_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_reg_61 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_reg_73 : STD_LOGIC_VECTOR (10 downto 0);
    signal z_reg_85 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv1_reg_98 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_1_reg_109 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_reg_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal idx_2_reg_131 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_reg_141 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_109_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast_fu_194_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_1_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_1_reg_109 <= idx_reg_73;
            elsif (((exitcond_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                idx_1_reg_109 <= tmp_54_reg_254;
            end if; 
        end if;
    end process;

    idx_2_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_2_reg_131 <= idx_1_reg_109;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                idx_2_reg_131 <= idx_4_reg_282;
            end if; 
        end if;
    end process;

    idx_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_reg_73 <= ap_const_lv11_0;
            elsif (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_reg_73 <= idx_6_reg_236;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv1_reg_98 <= indvars_iv_reg_61;
            elsif (((exitcond_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv1_reg_98 <= indvars_iv_next2_fu_226_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_61_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_61 <= ap_const_lv11_20;
            elsif (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_61 <= indvars_iv_next_fu_188_p2;
            end if; 
        end if;
    end process;

    x_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_141 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_reg_141 <= x_1_reg_267;
            end if; 
        end if;
    end process;

    y_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_120 <= ap_const_lv6_0;
            elsif (((exitcond_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_120 <= y_1_reg_244;
            end if; 
        end if;
    end process;

    z_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                z_reg_85 <= ap_const_lv1_0;
            elsif (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_reg_85 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                idx_4_reg_282 <= idx_4_fu_220_p2;
                tmp_reg_272 <= tmp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                idx_6_reg_236 <= idx_6_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_158_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_54_reg_254 <= tmp_54_fu_182_p2;
                    tmp_s_reg_249(9 downto 5) <= tmp_s_fu_174_p3(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_1_reg_267 <= x_1_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_1_reg_244 <= y_1_fu_164_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_249(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_z_phi_fu_90_p4, ap_CS_fsm_state3, exitcond3_fu_158_p2, ap_CS_fsm_state4, exitcond_fu_198_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_158_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_z_phi_fu_90_p4)
    begin
        if ((((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_z_phi_fu_90_p4 <= z_reg_85;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_z_phi_fu_90_p4)
    begin
        if (((ap_phi_mux_z_phi_fu_90_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_158_p2 <= "1" when (y_reg_120 = ap_const_lv6_20) else "0";
    exitcond_fu_198_p2 <= "1" when (idx_2_reg_131 = indvars_iv1_reg_98) else "0";
    idx_4_fu_220_p2 <= std_logic_vector(unsigned(idx_2_reg_131) + unsigned(ap_const_lv11_1));
    idx_6_fu_152_p2 <= (idx_reg_73 xor ap_const_lv11_400);
    in_V_address0 <= tmp_109_fu_215_p1(10 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next2_fu_226_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_98) + unsigned(ap_const_lv11_20));
    indvars_iv_next_fu_188_p2 <= (indvars_iv_reg_61 xor ap_const_lv11_400);
    out_V_address0 <= tmp_108_fu_232_p1(10 - 1 downto 0);

    out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= in_V_q0;

    out_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_108_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_272),64));
    tmp_109_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_2_reg_131),64));
    tmp_54_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv11_20) + unsigned(idx_1_reg_109));
    tmp_81_fu_170_p1 <= y_reg_120(5 - 1 downto 0);
    tmp_fu_210_p2 <= std_logic_vector(unsigned(tmp_s_reg_249) + unsigned(x_cast_fu_194_p1));
    tmp_s_fu_174_p3 <= (tmp_81_fu_170_p1 & ap_const_lv5_0);
    x_1_fu_204_p2 <= std_logic_vector(unsigned(x_reg_141) + unsigned(ap_const_lv6_1));
    x_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_141),10));
    y_1_fu_164_p2 <= std_logic_vector(unsigned(y_reg_120) + unsigned(ap_const_lv6_1));
end behav;
