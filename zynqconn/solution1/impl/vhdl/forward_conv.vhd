-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_input_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_layer_5_6_1_0_32_32_1_input_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_6_1_0_32_32_1_output_data_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_layer_5_6_1_0_32_32_1_output_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_output_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_6_1_0_32_32_1_W_data_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_layer_5_6_1_0_32_32_1_W_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_W_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_6_1_0_32_32_1_inpad_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_6_1_0_32_32_1_inpad_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of forward_conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal phi_mul_cast_fu_243_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_cast_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phi_mul1_cast_fu_247_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul1_cast_reg_510 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul2_fu_251_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul2_reg_515 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_filter_fu_269_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_filter_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal v_4_cast1_fu_275_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal v_4_cast1_reg_533 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v_4_cast9_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_4_cast9_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_y_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_y_reg_546 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_107_cast_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_cast_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ho_2_cast6_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ho_2_cast6_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_x_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_x_reg_565 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_109_cast_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_cast_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_438_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_68_reg_581 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_98_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ho_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ho_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv_layer_inpad_da_3_reg_606 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_layer_W_data_V_3_reg_611 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_Padding_fu_235_ap_start : STD_LOGIC;
    signal grp_Padding_fu_235_ap_done : STD_LOGIC;
    signal grp_Padding_fu_235_ap_idle : STD_LOGIC;
    signal grp_Padding_fu_235_ap_ready : STD_LOGIC;
    signal grp_Padding_fu_235_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_fu_235_out_V_ce0 : STD_LOGIC;
    signal grp_Padding_fu_235_out_V_we0 : STD_LOGIC;
    signal grp_Padding_fu_235_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Padding_fu_235_in_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Padding_fu_235_in_V_ce0 : STD_LOGIC;
    signal p_z_assign_reg_109 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal phi_mul_reg_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul1_reg_131 : STD_LOGIC_VECTOR (12 downto 0);
    signal v_4_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ho_2_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_p_z_assign_1_phi_fu_184_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_166 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_97_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_z_assign_1_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_082_2_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_x_assign_5_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_reg_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_assign_5_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_fu_235_ap_start_reg : STD_LOGIC := '0';
    signal tmp_96_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_cast_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_4_cast_fu_283_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_299_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ho_2_cast_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_fu_329_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_fu_339_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_fu_351_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_347_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_359_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_363_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_fu_369_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_cast_fu_374_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_95_fu_378_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_assign_6_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_70_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_496_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Padding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_mac_muladd_16s_16s_28ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    grp_Padding_fu_235 : component Padding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_fu_235_ap_start,
        ap_done => grp_Padding_fu_235_ap_done,
        ap_idle => grp_Padding_fu_235_ap_idle,
        ap_ready => grp_Padding_fu_235_ap_ready,
        out_V_address0 => grp_Padding_fu_235_out_V_address0,
        out_V_ce0 => grp_Padding_fu_235_out_V_ce0,
        out_V_we0 => grp_Padding_fu_235_out_V_we0,
        out_V_d0 => grp_Padding_fu_235_out_V_d0,
        in_V_address0 => grp_Padding_fu_235_in_V_address0,
        in_V_ce0 => grp_Padding_fu_235_in_V_ce0,
        in_V_q0 => conv_layer_5_6_1_0_32_32_1_input_data_V_q0);

    lenet_mac_muladd_16s_16s_28ns_28_1_1_U3 : component lenet_mac_muladd_16s_16s_28ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => conv_layer_inpad_da_3_reg_606,
        din1 => conv_layer_W_data_V_3_reg_611,
        din2 => grp_fu_496_p2,
        dout => grp_fu_496_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Padding_fu_235_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_fu_235_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Padding_fu_235_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_fu_235_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_fu_235_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ho_2_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ho_2_reg_154 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = ap_const_lv1_1))) then 
                ho_2_reg_154 <= idx_x_reg_565;
            end if; 
        end if;
    end process;

    p_082_2_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_082_2_reg_192 <= p_Val2_s_reg_166;
            elsif (((tmp_98_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_082_2_reg_192 <= p_Val2_3_reg_214;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_97_fu_388_p2 = ap_const_lv1_1))) then 
                p_Val2_3_reg_214 <= p_082_2_reg_192;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_3_reg_214 <= grp_fu_496_p3(27 downto 12);
            end if; 
        end if;
    end process;

    p_Val2_s_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_97_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_Val2_s_reg_166 <= p_082_2_reg_192;
            elsif (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_s_reg_166 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_x_assign_5_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_x_assign_5_reg_204 <= v_4_cast9_reg_538;
            elsif (((tmp_98_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_x_assign_5_reg_204 <= v_fu_448_p2;
            end if; 
        end if;
    end process;

    p_y_assign_5_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_97_fu_388_p2 = ap_const_lv1_1))) then 
                p_y_assign_5_reg_226 <= ho_2_cast6_reg_556;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_y_assign_5_reg_226 <= ho_reg_591;
            end if; 
        end if;
    end process;

    p_z_assign_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_97_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_z_assign_1_reg_179 <= ap_const_lv1_1;
            elsif (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_z_assign_1_reg_179 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_z_assign_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_z_assign_reg_109 <= idx_filter_reg_528;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_fu_235_ap_done = ap_const_logic_1))) then 
                p_z_assign_reg_109 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul1_reg_131 <= next_mul2_reg_515;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_fu_235_ap_done = ap_const_logic_1))) then 
                phi_mul1_reg_131 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_120 <= next_mul_reg_520;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_fu_235_ap_done = ap_const_logic_1))) then 
                phi_mul_reg_120 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    v_4_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_4_reg_142 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_317_p2 = ap_const_lv1_1))) then 
                v_4_reg_142 <= idx_y_reg_546;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv_layer_W_data_V_3_reg_611 <= conv_layer_5_6_1_0_32_32_1_W_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv_layer_inpad_da_3_reg_606 <= conv_layer_5_6_1_0_32_32_1_inpad_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    ho_2_cast6_reg_556(4 downto 0) <= ho_2_cast6_fu_309_p1(4 downto 0);
                idx_x_reg_565 <= idx_x_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_98_fu_393_p2 = ap_const_lv1_1))) then
                ho_reg_591 <= ho_fu_442_p2;
                tmp_68_reg_581 <= tmp_68_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                idx_filter_reg_528 <= idx_filter_fu_269_p2;
                next_mul2_reg_515 <= next_mul2_fu_251_p2;
                next_mul_reg_520 <= next_mul_fu_257_p2;
                    phi_mul1_cast_reg_510(12 downto 0) <= phi_mul1_cast_fu_247_p1(12 downto 0);
                    phi_mul_cast_reg_505(7 downto 0) <= phi_mul_cast_fu_243_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                idx_y_reg_546 <= idx_y_fu_293_p2;
                    v_4_cast1_reg_533(4 downto 0) <= v_4_cast1_fu_275_p1(4 downto 0);
                    v_4_cast9_reg_538(4 downto 0) <= v_4_cast9_fu_279_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_107_cast_reg_551(5 downto 0) <= tmp_107_cast_fu_305_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_109_cast_reg_570(5 downto 0) <= tmp_109_cast_fu_335_p1(5 downto 0);
            end if;
        end if;
    end process;
    phi_mul_cast_reg_505(8) <= '0';
    phi_mul1_cast_reg_510(13) <= '0';
    v_4_cast1_reg_533(10 downto 5) <= "000000";
    v_4_cast9_reg_538(31 downto 5) <= "000000000000000000000000000";
    tmp_107_cast_reg_551(31 downto 6) <= "00000000000000000000000000";
    ho_2_cast6_reg_556(31 downto 5) <= "000000000000000000000000000";
    tmp_109_cast_reg_570(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_287_p2, ap_CS_fsm_state5, exitcond2_fu_317_p2, ap_CS_fsm_state8, tmp_98_fu_393_p2, grp_Padding_fu_235_ap_done, ap_CS_fsm_state2, exitcond_fu_263_p2, ap_CS_fsm_state6, ap_phi_mux_p_z_assign_1_phi_fu_184_p4, ap_CS_fsm_state7, tmp_97_fu_388_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_fu_235_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_97_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_98_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_263_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_263_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_p_z_assign_1_phi_fu_184_p4 <= p_z_assign_1_reg_179;

    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_263_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_263_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_6_1_0_32_32_1_W_data_V_address0 <= tmp_128_cast_fu_468_p1(8 - 1 downto 0);

    conv_layer_5_6_1_0_32_32_1_W_data_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_6_1_0_32_32_1_W_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_6_1_0_32_32_1_W_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0_assign_proc : process(ap_CS_fsm_state8, grp_Padding_fu_235_out_V_address0, ap_CS_fsm_state2, tmp_99_fu_410_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 <= tmp_99_fu_410_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 <= grp_Padding_fu_235_out_V_address0;
        else 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0_assign_proc : process(ap_CS_fsm_state8, grp_Padding_fu_235_out_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 <= grp_Padding_fu_235_out_V_ce0;
        else 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_6_1_0_32_32_1_inpad_data_V_d0 <= grp_Padding_fu_235_out_V_d0;

    conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0_assign_proc : process(grp_Padding_fu_235_out_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0 <= grp_Padding_fu_235_out_V_we0;
        else 
            conv_layer_5_6_1_0_32_32_1_inpad_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_6_1_0_32_32_1_input_data_V_address0 <= grp_Padding_fu_235_in_V_address0;
    conv_layer_5_6_1_0_32_32_1_input_data_V_ce0 <= grp_Padding_fu_235_in_V_ce0;
    conv_layer_5_6_1_0_32_32_1_output_data_V_address0 <= tmp_96_fu_383_p1(13 - 1 downto 0);

    conv_layer_5_6_1_0_32_32_1_output_data_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer_5_6_1_0_32_32_1_output_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_6_1_0_32_32_1_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_6_1_0_32_32_1_output_data_V_d0 <= p_Val2_s_reg_166;

    conv_layer_5_6_1_0_32_32_1_output_data_V_we0_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_p_z_assign_1_phi_fu_184_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_phi_mux_p_z_assign_1_phi_fu_184_p4 = ap_const_lv1_1))) then 
            conv_layer_5_6_1_0_32_32_1_output_data_V_we0 <= ap_const_logic_1;
        else 
            conv_layer_5_6_1_0_32_32_1_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_317_p2 <= "1" when (ho_2_reg_154 = ap_const_lv5_1C) else "0";
    exitcond3_fu_287_p2 <= "1" when (v_4_reg_142 = ap_const_lv5_1C) else "0";
    exitcond_fu_263_p2 <= "1" when (p_z_assign_reg_109 = ap_const_lv3_6) else "0";
    grp_Padding_fu_235_ap_start <= grp_Padding_fu_235_ap_start_reg;
    grp_fu_496_p2 <= (p_Val2_3_reg_214 & ap_const_lv12_0);
    ho_2_cast6_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ho_2_reg_154),32));
    ho_2_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ho_2_reg_154),6));
    ho_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_y_assign_5_reg_226));
    idx_filter_fu_269_p2 <= std_logic_vector(unsigned(p_z_assign_reg_109) + unsigned(ap_const_lv3_1));
    idx_x_fu_323_p2 <= std_logic_vector(unsigned(ho_2_reg_154) + unsigned(ap_const_lv5_1));
    idx_y_fu_293_p2 <= std_logic_vector(unsigned(v_4_reg_142) + unsigned(ap_const_lv5_1));
    next_mul2_fu_251_p2 <= std_logic_vector(unsigned(phi_mul1_reg_131) + unsigned(ap_const_lv13_310));
    next_mul_fu_257_p2 <= std_logic_vector(unsigned(phi_mul_reg_120) + unsigned(ap_const_lv8_19));
    p_shl8_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_339_p3),11));
    p_shl8_fu_339_p3 <= (ho_2_reg_154 & ap_const_lv5_0);
    p_shl9_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_351_p3),11));
    p_shl9_fu_351_p3 <= (ho_2_reg_154 & ap_const_lv2_0);
    p_y_assign_6_fu_415_p2 <= std_logic_vector(unsigned(p_y_assign_5_reg_226) - unsigned(ho_2_cast6_reg_556));
    phi_mul1_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_131),14));
    phi_mul_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_120),9));
    tmp1_fu_404_p2 <= std_logic_vector(unsigned(p_x_assign_5_reg_204) + unsigned(tmp_fu_398_p2));
    tmp2_fu_426_p2 <= std_logic_vector(unsigned(tmp_67_fu_420_p2) + unsigned(p_y_assign_6_fu_415_p2));
        tmp4_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_369_p2),14));

    tmp4_fu_369_p2 <= std_logic_vector(unsigned(tmp_94_fu_363_p2) + unsigned(v_4_cast1_reg_533));
    tmp_100_fu_432_p2 <= std_logic_vector(unsigned(p_x_assign_5_reg_204) + unsigned(tmp2_fu_426_p2));
    tmp_101_fu_463_p2 <= std_logic_vector(unsigned(tmp_70_fu_458_p2) + unsigned(phi_mul_cast_reg_505));
    tmp_107_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_299_p2),32));
    tmp_109_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_329_p2),32));
    tmp_128_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_463_p2),64));
    tmp_67_fu_420_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_6_fu_415_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_68_fu_438_p1 <= tmp_100_fu_432_p2(9 - 1 downto 0);
    tmp_69_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_4_reg_142),9));
    tmp_70_fu_458_p2 <= std_logic_vector(unsigned(tmp_68_reg_581) - unsigned(tmp_69_fu_454_p1));
    tmp_93_fu_329_p2 <= std_logic_vector(unsigned(ho_2_cast_fu_313_p1) + unsigned(ap_const_lv6_5));
    tmp_94_fu_363_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_347_p1) - unsigned(p_shl9_cast_fu_359_p1));
    tmp_95_fu_378_p2 <= std_logic_vector(unsigned(phi_mul1_cast_reg_510) + unsigned(tmp4_cast_fu_374_p1));
        tmp_96_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_378_p2),64));

    tmp_97_fu_388_p2 <= "1" when (signed(p_x_assign_5_reg_204) < signed(tmp_107_cast_reg_551)) else "0";
    tmp_98_fu_393_p2 <= "1" when (signed(p_y_assign_5_reg_226) < signed(tmp_109_cast_reg_570)) else "0";
        tmp_99_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_404_p2),64));

    tmp_fu_398_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_5_reg_226),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_s_fu_299_p2 <= std_logic_vector(unsigned(v_4_cast_fu_283_p1) + unsigned(ap_const_lv6_5));
    v_4_cast1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_4_reg_142),11));
    v_4_cast9_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_4_reg_142),32));
    v_4_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_4_reg_142),6));
    v_fu_448_p2 <= std_logic_vector(unsigned(p_x_assign_5_reg_204) + unsigned(ap_const_lv32_1));
end behav;
