-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Padding_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_282 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal z_1_fu_176_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_1_reg_290 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_3_fu_182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_3_reg_295 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_50_fu_212_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_reg_308 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_313 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1_fu_244_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_256_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_331 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_4_fu_266_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_4_reg_341 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next2_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_reg_63 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_reg_75 : STD_LOGIC_VECTOR (8 downto 0);
    signal z_reg_87 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_98 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv1_reg_110 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_1_reg_121 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_2_reg_143 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_104_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_cast3_fu_188_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_204_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast_fu_234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_1_reg_121 <= idx_reg_75;
            elsif (((exitcond_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                idx_1_reg_121 <= tmp_50_reg_308;
            end if; 
        end if;
    end process;

    idx_2_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_2_reg_143 <= idx_1_reg_121;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                idx_2_reg_143 <= idx_4_reg_341;
            end if; 
        end if;
    end process;

    idx_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_reg_75 <= ap_const_lv9_0;
            elsif (((exitcond3_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_reg_75 <= idx_3_reg_295;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv1_reg_110 <= indvars_iv_reg_63;
            elsif (((exitcond_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv1_reg_110 <= indvars_iv_next2_fu_272_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_63_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_63 <= ap_const_lv9_5;
            elsif (((exitcond3_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_63 <= indvars_iv_next_fu_228_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_98 <= ap_const_lv9_0;
            elsif (((exitcond3_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_98 <= next_mul_reg_282;
            end if; 
        end if;
    end process;

    x_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_153 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_reg_153 <= x_1_reg_326;
            end if; 
        end if;
    end process;

    y_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_132 <= ap_const_lv3_0;
            elsif (((exitcond_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_132 <= y_1_reg_303;
            end if; 
        end if;
    end process;

    z_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                z_reg_87 <= ap_const_lv5_0;
            elsif (((exitcond3_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_reg_87 <= z_1_reg_290;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                idx_3_reg_295 <= idx_3_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                idx_4_reg_341 <= idx_4_fu_266_p2;
                tmp_s_reg_331 <= tmp_s_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_282 <= next_mul_fu_164_p2;
                z_1_reg_290 <= z_1_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_50_reg_308 <= tmp_50_fu_212_p2;
                    tmp_cast_reg_313(4 downto 0) <= tmp_cast_fu_224_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_1_reg_326 <= x_1_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_1_reg_303 <= y_1_fu_198_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_313(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_170_p2, ap_CS_fsm_state3, exitcond3_fu_192_p2, ap_CS_fsm_state4, exitcond_fu_238_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_170_p2)
    begin
        if ((((exitcond4_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_170_p2)
    begin
        if (((exitcond4_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_192_p2 <= "1" when (y_reg_132 = ap_const_lv3_5) else "0";
    exitcond4_fu_170_p2 <= "1" when (z_reg_87 = ap_const_lv5_10) else "0";
    exitcond_fu_238_p2 <= "1" when (idx_2_reg_143 = indvars_iv1_reg_110) else "0";
    idx_3_fu_182_p2 <= std_logic_vector(unsigned(idx_reg_75) + unsigned(ap_const_lv9_19));
    idx_4_fu_266_p2 <= std_logic_vector(unsigned(idx_2_reg_143) + unsigned(ap_const_lv9_1));
    in_V_address0 <= tmp_104_fu_261_p1(9 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next2_fu_272_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_110) + unsigned(ap_const_lv9_5));
    indvars_iv_next_fu_228_p2 <= std_logic_vector(unsigned(indvars_iv_reg_63) + unsigned(ap_const_lv9_19));
    next_mul_fu_164_p2 <= std_logic_vector(unsigned(phi_mul_reg_98) + unsigned(ap_const_lv9_19));
    out_V_address0 <= tmp_103_fu_278_p1(9 - 1 downto 0);

    out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= in_V_q0;

    out_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_204_p3 <= (y_reg_132 & ap_const_lv2_0);
    tmp1_fu_250_p2 <= std_logic_vector(unsigned(phi_mul_reg_98) + unsigned(x_cast_fu_234_p1));
    tmp_103_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_331),64));
    tmp_104_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_2_reg_143),64));
    tmp_50_fu_212_p2 <= std_logic_vector(unsigned(idx_1_reg_121) + unsigned(ap_const_lv9_5));
    tmp_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_218_p2),9));
    tmp_fu_218_p2 <= std_logic_vector(unsigned(y_cast3_fu_188_p1) + unsigned(p_shl_fu_204_p3));
    tmp_s_fu_256_p2 <= std_logic_vector(unsigned(tmp1_fu_250_p2) + unsigned(tmp_cast_reg_313));
    x_1_fu_244_p2 <= std_logic_vector(unsigned(x_reg_153) + unsigned(ap_const_lv3_1));
    x_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_153),9));
    y_1_fu_198_p2 <= std_logic_vector(unsigned(y_reg_132) + unsigned(ap_const_lv3_1));
    y_cast3_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_132),5));
    z_1_fu_176_p2 <= std_logic_vector(unsigned(z_reg_87) + unsigned(ap_const_lv5_1));
end behav;
