-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Padding_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Padding_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_E : STD_LOGIC_VECTOR (10 downto 0) := "00000001110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal phi_mul_cast_fu_165_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul_cast_reg_302 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_169_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_307 : STD_LOGIC_VECTOR (10 downto 0);
    signal z_1_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal z_1_reg_315 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx_5_fu_187_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_5_reg_320 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_199_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_1_reg_328 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_333 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_reg_338 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_next_fu_241_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_1_fu_257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_1_reg_351 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_105_fu_272_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_reg_356 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_4_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_4_reg_366 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_next3_fu_288_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_reg_65 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_reg_77 : STD_LOGIC_VECTOR (10 downto 0);
    signal z_reg_89 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_reg_100 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv2_reg_111 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_1_reg_122 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_2_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_107_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_205_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_cast_fu_247_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_268_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_169_cast_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_1_reg_122 <= idx_reg_77;
            elsif (((exitcond_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                idx_1_reg_122 <= tmp_52_reg_338;
            end if; 
        end if;
    end process;

    idx_2_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_2_reg_144 <= idx_1_reg_122;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                idx_2_reg_144 <= idx_4_reg_366;
            end if; 
        end if;
    end process;

    idx_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_reg_77 <= ap_const_lv11_0;
            elsif (((exitcond4_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_reg_77 <= idx_5_reg_320;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv2_reg_111 <= indvars_iv_reg_65;
            elsif (((exitcond_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv2_reg_111 <= indvars_iv_next3_fu_288_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_65 <= ap_const_lv11_E;
            elsif (((exitcond4_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv_reg_65 <= indvars_iv_next_fu_241_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_100 <= ap_const_lv11_0;
            elsif (((exitcond4_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_100 <= next_mul_reg_307;
            end if; 
        end if;
    end process;

    x_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_reg_154 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_reg_154 <= x_1_reg_351;
            end if; 
        end if;
    end process;

    y_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_reg_133 <= ap_const_lv4_0;
            elsif (((exitcond_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_reg_133 <= y_1_reg_328;
            end if; 
        end if;
    end process;

    z_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                z_reg_89 <= ap_const_lv3_0;
            elsif (((exitcond4_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_reg_89 <= z_1_reg_315;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                idx_4_reg_366 <= idx_4_fu_282_p2;
                tmp_105_reg_356 <= tmp_105_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                idx_5_reg_320 <= idx_5_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_307 <= next_mul_fu_169_p2;
                    phi_mul_cast_reg_302(10 downto 0) <= phi_mul_cast_fu_165_p1(10 downto 0);
                z_1_reg_315 <= z_1_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_52_reg_338 <= tmp_52_fu_235_p2;
                    tmp_s_reg_333(8 downto 1) <= tmp_s_fu_229_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_1_reg_351 <= x_1_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_1_reg_328 <= y_1_fu_199_p2;
            end if;
        end if;
    end process;
    phi_mul_cast_reg_302(11) <= '0';
    tmp_s_reg_333(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_175_p2, ap_CS_fsm_state3, exitcond4_fu_193_p2, ap_CS_fsm_state4, exitcond_fu_251_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_175_p2)
    begin
        if ((((exitcond5_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_175_p2)
    begin
        if (((exitcond5_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_193_p2 <= "1" when (y_reg_133 = ap_const_lv4_E) else "0";
    exitcond5_fu_175_p2 <= "1" when (z_reg_89 = ap_const_lv3_6) else "0";
    exitcond_fu_251_p2 <= "1" when (idx_2_reg_144 = indvars_iv2_reg_111) else "0";
    idx_4_fu_282_p2 <= std_logic_vector(unsigned(idx_2_reg_144) + unsigned(ap_const_lv11_1));
    idx_5_fu_187_p2 <= std_logic_vector(unsigned(idx_reg_77) + unsigned(ap_const_lv11_C4));
    in_V_address0 <= tmp_107_fu_277_p1(11 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next3_fu_288_p2 <= std_logic_vector(unsigned(indvars_iv2_reg_111) + unsigned(ap_const_lv11_E));
    indvars_iv_next_fu_241_p2 <= std_logic_vector(unsigned(indvars_iv_reg_65) + unsigned(ap_const_lv11_C4));
    next_mul_fu_169_p2 <= std_logic_vector(unsigned(phi_mul_reg_100) + unsigned(ap_const_lv11_C4));
    out_V_address0 <= tmp_106_fu_297_p1(11 - 1 downto 0);

    out_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_V_d0 <= in_V_q0;

    out_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_217_p3),9));
    p_shl1_fu_217_p3 <= (y_reg_133 & ap_const_lv1_0);
    p_shl_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_205_p3),9));
    p_shl_fu_205_p3 <= (y_reg_133 & ap_const_lv4_0);
    phi_mul_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_100),12));
    tmp_105_fu_272_p2 <= std_logic_vector(signed(tmp_cast_fu_268_p1) + signed(phi_mul_cast_reg_302));
    tmp_106_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_cast_fu_294_p1),64));
    tmp_107_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_2_reg_144),64));
        tmp_169_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_105_reg_356),32));

    tmp_52_fu_235_p2 <= std_logic_vector(unsigned(idx_1_reg_122) + unsigned(ap_const_lv11_E));
        tmp_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_263_p2),12));

    tmp_fu_263_p2 <= std_logic_vector(unsigned(tmp_s_reg_333) + unsigned(x_cast_fu_247_p1));
    tmp_s_fu_229_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_213_p1) - unsigned(p_shl1_cast_fu_225_p1));
    x_1_fu_257_p2 <= std_logic_vector(unsigned(x_reg_154) + unsigned(ap_const_lv4_1));
    x_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_154),9));
    y_1_fu_199_p2 <= std_logic_vector(unsigned(y_reg_133) + unsigned(ap_const_lv4_1));
    z_1_fu_181_p2 <= std_logic_vector(unsigned(z_reg_89) + unsigned(ap_const_lv3_1));
end behav;
