-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward_conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_input_data_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_layer_5_16_1_0_14_14_6_input_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_16_1_0_14_14_6_output_data_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_layer_5_16_1_0_14_14_6_output_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_output_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_16_1_0_14_14_6_W_data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_layer_5_16_1_0_14_14_6_W_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_W_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_16_1_0_14_14_6_inpad_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_16_1_0_14_14_6_inpad_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of forward_conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_64 : STD_LOGIC_VECTOR (10 downto 0) := "00001100100";
    constant ap_const_lv12_96 : STD_LOGIC_VECTOR (11 downto 0) := "000010010110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal phi_mul3_cast_fu_270_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul3_cast_reg_569 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal next_mul6_fu_274_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul6_reg_574 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul4_fu_280_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul4_reg_579 : STD_LOGIC_VECTOR (11 downto 0);
    signal idx_filter_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_filter_reg_587 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_5_cast1_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_5_cast1_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal idx_y_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_y_reg_600 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_128_cast_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_cast_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_reg_610 : STD_LOGIC_VECTOR (10 downto 0);
    signal ho_3_cast8_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ho_3_cast8_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_x_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_x_reg_624 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_130_cast_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_130_cast_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul2_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul_fu_366_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_639 : STD_LOGIC_VECTOR (10 downto 0);
    signal ch_fu_378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_647 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_134_cast_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_cast_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_cast_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_cast_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_85_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_86_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_498_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_64_reg_678 : STD_LOGIC_VECTOR (12 downto 0);
    signal ho_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ho_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv_layer_inpad_da_2_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv_layer_W_data_V_2_reg_708 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_Padding_1_fu_262_ap_start : STD_LOGIC;
    signal grp_Padding_1_fu_262_ap_done : STD_LOGIC;
    signal grp_Padding_1_fu_262_ap_idle : STD_LOGIC;
    signal grp_Padding_1_fu_262_ap_ready : STD_LOGIC;
    signal grp_Padding_1_fu_262_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Padding_1_fu_262_out_V_ce0 : STD_LOGIC;
    signal grp_Padding_1_fu_262_out_V_we0 : STD_LOGIC;
    signal grp_Padding_1_fu_262_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Padding_1_fu_262_in_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Padding_1_fu_262_in_V_ce0 : STD_LOGIC;
    signal p_z_assign_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal phi_mul3_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul5_reg_137 : STD_LOGIC_VECTOR (10 downto 0);
    signal v_3_reg_149 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ho_2_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_2_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_reg_197 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_mul1_reg_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_082_2_reg_219 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_x_assign_6_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_241 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_assign_7_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Padding_1_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal tmp_84_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_cast_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_5_cast_fu_298_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_82_fu_350_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_fu_400_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_408_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_fu_392_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_fu_412_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_cast_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_83_fu_422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_assign_8_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_518_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_66_fu_522_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_91_fu_527_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_560_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_560_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Padding_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_mac_muladd_16s_16s_28ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    grp_Padding_1_fu_262 : component Padding_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_1_fu_262_ap_start,
        ap_done => grp_Padding_1_fu_262_ap_done,
        ap_idle => grp_Padding_1_fu_262_ap_idle,
        ap_ready => grp_Padding_1_fu_262_ap_ready,
        out_V_address0 => grp_Padding_1_fu_262_out_V_address0,
        out_V_ce0 => grp_Padding_1_fu_262_out_V_ce0,
        out_V_we0 => grp_Padding_1_fu_262_out_V_we0,
        out_V_d0 => grp_Padding_1_fu_262_out_V_d0,
        in_V_address0 => grp_Padding_1_fu_262_in_V_address0,
        in_V_ce0 => grp_Padding_1_fu_262_in_V_ce0,
        in_V_q0 => conv_layer_5_16_1_0_14_14_6_input_data_V_q0);

    lenet_mac_muladd_16s_16s_28ns_28_1_1_U23 : component lenet_mac_muladd_16s_16s_28ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => conv_layer_inpad_da_2_reg_703,
        din1 => conv_layer_W_data_V_2_reg_708,
        din2 => grp_fu_560_p2,
        dout => grp_fu_560_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Padding_1_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_1_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Padding_1_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_1_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_1_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ho_2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ho_2_reg_161 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_372_p2 = ap_const_lv1_1))) then 
                ho_2_reg_161 <= idx_x_reg_624;
            end if; 
        end if;
    end process;

    p_082_2_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_082_2_reg_219 <= p_Val2_s_reg_173;
            elsif (((tmp_86_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_082_2_reg_219 <= p_Val2_5_reg_241;
            end if; 
        end if;
    end process;

    p_Val2_5_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_85_fu_432_p2 = ap_const_lv1_1))) then 
                p_Val2_5_reg_241 <= p_082_2_reg_219;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_5_reg_241 <= grp_fu_560_p3(27 downto 12);
            end if; 
        end if;
    end process;

    p_Val2_s_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_85_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_Val2_s_reg_173 <= p_082_2_reg_219;
            elsif (((exitcond2_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_s_reg_173 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_x_assign_6_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_x_assign_6_reg_231 <= v_5_cast1_reg_592;
            elsif (((tmp_86_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_x_assign_6_reg_231 <= v_fu_508_p2;
            end if; 
        end if;
    end process;

    p_y_assign_7_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_85_fu_432_p2 = ap_const_lv1_1))) then 
                p_y_assign_7_reg_253 <= ho_3_cast8_reg_615;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_y_assign_7_reg_253 <= ho_reg_683;
            end if; 
        end if;
    end process;

    p_z_assign_2_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_85_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_z_assign_2_reg_186 <= ch_reg_647;
            elsif (((exitcond2_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_z_assign_2_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_z_assign_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_z_assign_reg_115 <= idx_filter_reg_587;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_1_fu_262_ap_done = ap_const_logic_1))) then 
                p_z_assign_reg_115 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_85_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul1_reg_208 <= next_mul2_reg_634;
            elsif (((exitcond2_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul1_reg_208 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul3_reg_126 <= next_mul4_reg_579;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_1_fu_262_ap_done = ap_const_logic_1))) then 
                phi_mul3_reg_126 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul5_reg_137 <= next_mul6_reg_574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_1_fu_262_ap_done = ap_const_logic_1))) then 
                phi_mul5_reg_137 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_85_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_197 <= next_mul_reg_639;
            elsif (((exitcond2_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_197 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    v_3_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_3_reg_149 <= ap_const_lv4_0;
            elsif (((exitcond2_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                v_3_reg_149 <= idx_y_reg_600;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ch_reg_647 <= ch_fu_378_p2;
                next_mul2_reg_634 <= next_mul2_fu_360_p2;
                next_mul_reg_639 <= next_mul_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv_layer_W_data_V_2_reg_708 <= conv_layer_5_16_1_0_14_14_6_W_data_V_q0;
                conv_layer_inpad_da_2_reg_703 <= conv_layer_5_16_1_0_14_14_6_inpad_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    ho_3_cast8_reg_615(3 downto 0) <= ho_3_cast8_fu_334_p1(3 downto 0);
                idx_x_reg_624 <= idx_x_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_86_fu_442_p2 = ap_const_lv1_1))) then
                ho_reg_683 <= ho_fu_502_p2;
                tmp_64_reg_678 <= tmp_64_fu_498_p1;
                tmp_88_reg_673 <= tmp_88_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                idx_filter_reg_587 <= idx_filter_fu_292_p2;
                next_mul4_reg_579 <= next_mul4_fu_280_p2;
                next_mul6_reg_574 <= next_mul6_fu_274_p2;
                    phi_mul3_cast_reg_569(11 downto 0) <= phi_mul3_cast_fu_270_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                idx_y_reg_600 <= idx_y_fu_312_p2;
                    v_5_cast1_reg_592(3 downto 0) <= v_5_cast1_fu_302_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_85_fu_432_p2 = ap_const_lv1_1))) then
                tmp3_reg_665 <= tmp3_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp4_reg_610 <= tmp4_fu_328_p2;
                    tmp_128_cast_reg_605(3 downto 0) <= tmp_128_cast_fu_324_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_130_cast_reg_629(3 downto 0) <= tmp_130_cast_fu_356_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_134_cast_reg_652(10 downto 0) <= tmp_134_cast_fu_384_p1(10 downto 0);
                    tmp_135_cast_reg_657(7 downto 0) <= tmp_135_cast_fu_388_p1(7 downto 0);
            end if;
        end if;
    end process;
    phi_mul3_cast_reg_569(12) <= '0';
    v_5_cast1_reg_592(31 downto 4) <= "0000000000000000000000000000";
    tmp_128_cast_reg_605(31 downto 4) <= "0000000000000000000000000000";
    ho_3_cast8_reg_615(31 downto 4) <= "0000000000000000000000000000";
    tmp_130_cast_reg_629(31 downto 4) <= "0000000000000000000000000000";
    tmp_134_cast_reg_652(31 downto 11) <= "000000000000000000000";
    tmp_135_cast_reg_657(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_306_p2, ap_CS_fsm_state5, exitcond2_fu_338_p2, ap_CS_fsm_state6, exitcond1_fu_372_p2, ap_CS_fsm_state7, tmp_85_fu_432_p2, ap_CS_fsm_state8, tmp_86_fu_442_p2, grp_Padding_1_fu_262_ap_done, ap_CS_fsm_state2, exitcond_fu_286_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_1_fu_262_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_85_fu_432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_86_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_286_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_286_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_286_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_378_p2 <= std_logic_vector(unsigned(p_z_assign_2_reg_186) + unsigned(ap_const_lv3_1));
    conv_layer_5_16_1_0_14_14_6_W_data_V_address0 <= tmp_124_cast_fu_532_p1(12 - 1 downto 0);

    conv_layer_5_16_1_0_14_14_6_W_data_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_16_1_0_14_14_6_W_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_16_1_0_14_14_6_W_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0_assign_proc : process(ap_CS_fsm_state9, grp_Padding_1_fu_262_out_V_address0, ap_CS_fsm_state2, tmp_89_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 <= tmp_89_fu_514_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 <= grp_Padding_1_fu_262_out_V_address0;
        else 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0_assign_proc : process(ap_CS_fsm_state9, grp_Padding_1_fu_262_out_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 <= grp_Padding_1_fu_262_out_V_ce0;
        else 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_16_1_0_14_14_6_inpad_data_V_d0 <= grp_Padding_1_fu_262_out_V_d0;

    conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0_assign_proc : process(grp_Padding_1_fu_262_out_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0 <= grp_Padding_1_fu_262_out_V_we0;
        else 
            conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_16_1_0_14_14_6_input_data_V_address0 <= grp_Padding_1_fu_262_in_V_address0;
    conv_layer_5_16_1_0_14_14_6_input_data_V_ce0 <= grp_Padding_1_fu_262_in_V_ce0;
    conv_layer_5_16_1_0_14_14_6_output_data_V_address0 <= tmp_84_fu_427_p1(11 - 1 downto 0);

    conv_layer_5_16_1_0_14_14_6_output_data_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer_5_16_1_0_14_14_6_output_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_16_1_0_14_14_6_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_16_1_0_14_14_6_output_data_V_d0 <= p_Val2_s_reg_173;

    conv_layer_5_16_1_0_14_14_6_output_data_V_we0_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_372_p2 = ap_const_lv1_1))) then 
            conv_layer_5_16_1_0_14_14_6_output_data_V_we0 <= ap_const_logic_1;
        else 
            conv_layer_5_16_1_0_14_14_6_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_372_p2 <= "1" when (p_z_assign_2_reg_186 = ap_const_lv3_6) else "0";
    exitcond2_fu_338_p2 <= "1" when (ho_2_reg_161 = ap_const_lv4_A) else "0";
    exitcond3_fu_306_p2 <= "1" when (v_3_reg_149 = ap_const_lv4_A) else "0";
    exitcond_fu_286_p2 <= "1" when (p_z_assign_reg_115 = ap_const_lv5_10) else "0";
    grp_Padding_1_fu_262_ap_start <= grp_Padding_1_fu_262_ap_start_reg;
    grp_fu_560_p2 <= (p_Val2_5_reg_241 & ap_const_lv12_0);
    ho_3_cast8_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ho_2_reg_161),32));
    ho_fu_502_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_y_assign_7_reg_253));
    idx_filter_fu_292_p2 <= std_logic_vector(unsigned(p_z_assign_reg_115) + unsigned(ap_const_lv5_1));
    idx_x_fu_344_p2 <= std_logic_vector(unsigned(ho_2_reg_161) + unsigned(ap_const_lv4_1));
    idx_y_fu_312_p2 <= std_logic_vector(unsigned(v_3_reg_149) + unsigned(ap_const_lv4_1));
    next_mul2_fu_360_p2 <= std_logic_vector(unsigned(phi_mul1_reg_208) + unsigned(ap_const_lv8_19));
    next_mul4_fu_280_p2 <= std_logic_vector(unsigned(phi_mul3_reg_126) + unsigned(ap_const_lv12_96));
    next_mul6_fu_274_p2 <= std_logic_vector(unsigned(phi_mul5_reg_137) + unsigned(ap_const_lv11_64));
    next_mul_fu_366_p2 <= std_logic_vector(unsigned(phi_mul_reg_197) + unsigned(ap_const_lv11_C4));
    p_shl1_fu_392_p3 <= (ho_2_reg_161 & ap_const_lv3_0);
    p_shl2_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_400_p3),7));
    p_shl2_fu_400_p3 <= (ho_2_reg_161 & ap_const_lv1_0);
    p_y_assign_8_fu_476_p2 <= std_logic_vector(unsigned(p_y_assign_7_reg_253) - unsigned(ho_3_cast8_reg_615));
    phi_mul3_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul3_reg_126),13));
    tmp1_fu_465_p2 <= std_logic_vector(unsigned(p_x_assign_6_reg_231) + unsigned(tmp_87_fu_459_p2));
    tmp2_fu_487_p2 <= std_logic_vector(unsigned(tmp_63_fu_481_p2) + unsigned(p_y_assign_8_fu_476_p2));
    tmp3_fu_437_p2 <= std_logic_vector(unsigned(p_x_assign_6_reg_231) + unsigned(tmp_135_cast_reg_657));
    tmp4_fu_328_p2 <= std_logic_vector(unsigned(v_5_cast_fu_298_p1) + unsigned(phi_mul5_reg_137));
    tmp5_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_412_p2),11));
    tmp5_fu_412_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_408_p1) + unsigned(p_shl1_fu_392_p3));
    tmp_124_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_527_p2),64));
    tmp_128_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_318_p2),32));
    tmp_130_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_350_p2),32));
    tmp_134_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_197),32));
    tmp_135_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_208),32));
    tmp_62_fu_453_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_7_reg_253),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_63_fu_481_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_8_fu_476_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_64_fu_498_p1 <= tmp_90_fu_493_p2(13 - 1 downto 0);
    tmp_65_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_reg_149),13));
    tmp_66_fu_522_p2 <= std_logic_vector(unsigned(tmp_64_reg_678) - unsigned(tmp_65_fu_518_p1));
    tmp_82_fu_350_p2 <= std_logic_vector(unsigned(ho_2_reg_161) + unsigned(ap_const_lv4_5));
    tmp_83_fu_422_p2 <= std_logic_vector(unsigned(tmp4_reg_610) + unsigned(tmp5_cast_fu_418_p1));
    tmp_84_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_422_p2),64));
    tmp_85_fu_432_p2 <= "1" when (signed(p_x_assign_6_reg_231) < signed(tmp_128_cast_reg_605)) else "0";
    tmp_86_fu_442_p2 <= "1" when (signed(p_y_assign_7_reg_253) < signed(tmp_130_cast_reg_629)) else "0";
    tmp_87_fu_459_p2 <= std_logic_vector(unsigned(tmp_fu_447_p2) - unsigned(tmp_62_fu_453_p2));
    tmp_88_fu_471_p2 <= std_logic_vector(unsigned(tmp1_fu_465_p2) + unsigned(tmp_134_cast_reg_652));
        tmp_89_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_reg_673),64));

    tmp_90_fu_493_p2 <= std_logic_vector(unsigned(tmp3_reg_665) + unsigned(tmp2_fu_487_p2));
    tmp_91_fu_527_p2 <= std_logic_vector(unsigned(tmp_66_fu_522_p2) + unsigned(phi_mul3_cast_reg_569));
    tmp_fu_447_p2 <= std_logic_vector(shift_left(unsigned(p_y_assign_7_reg_253),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_s_fu_318_p2 <= std_logic_vector(unsigned(v_3_reg_149) + unsigned(ap_const_lv4_5));
    v_5_cast1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_reg_149),32));
    v_5_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_3_reg_149),11));
    v_fu_508_p2 <= std_logic_vector(unsigned(p_x_assign_6_reg_231) + unsigned(ap_const_lv32_1));
end behav;
