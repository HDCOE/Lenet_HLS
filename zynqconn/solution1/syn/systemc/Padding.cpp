// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Padding.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Padding::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Padding::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Padding::ap_ST_fsm_state1 = "1";
const sc_lv<5> Padding::ap_ST_fsm_state2 = "10";
const sc_lv<5> Padding::ap_ST_fsm_state3 = "100";
const sc_lv<5> Padding::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Padding::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Padding::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Padding::ap_const_lv32_1 = "1";
const sc_lv<1> Padding::ap_const_lv1_0 = "0";
const sc_lv<32> Padding::ap_const_lv32_2 = "10";
const sc_lv<1> Padding::ap_const_lv1_1 = "1";
const sc_lv<32> Padding::ap_const_lv32_3 = "11";
const sc_lv<11> Padding::ap_const_lv11_20 = "100000";
const sc_lv<11> Padding::ap_const_lv11_0 = "00000000000";
const sc_lv<6> Padding::ap_const_lv6_0 = "000000";
const sc_lv<32> Padding::ap_const_lv32_4 = "100";
const sc_lv<11> Padding::ap_const_lv11_400 = "10000000000";
const sc_lv<6> Padding::ap_const_lv6_20 = "100000";
const sc_lv<6> Padding::ap_const_lv6_1 = "1";
const sc_lv<5> Padding::ap_const_lv5_0 = "00000";
const sc_lv<11> Padding::ap_const_lv11_1 = "1";
const bool Padding::ap_const_boolean_1 = true;

Padding::Padding(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_phi_mux_z_phi_fu_90_p4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_z_phi_fu_90_p4);
    sensitive << ( z_reg_85 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_phi_mux_z_phi_fu_90_p4 );

    SC_METHOD(thread_exitcond3_fu_158_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( y_reg_120 );

    SC_METHOD(thread_exitcond_fu_198_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( indvars_iv1_reg_98 );
    sensitive << ( idx_2_reg_131 );

    SC_METHOD(thread_idx_4_fu_220_p2);
    sensitive << ( idx_2_reg_131 );

    SC_METHOD(thread_idx_6_fu_152_p2);
    sensitive << ( idx_reg_73 );

    SC_METHOD(thread_in_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_109_fu_215_p1 );

    SC_METHOD(thread_in_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_indvars_iv_next2_fu_226_p2);
    sensitive << ( indvars_iv1_reg_98 );

    SC_METHOD(thread_indvars_iv_next_fu_188_p2);
    sensitive << ( indvars_iv_reg_61 );

    SC_METHOD(thread_out_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_108_fu_232_p1 );

    SC_METHOD(thread_out_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_V_d0);
    sensitive << ( in_V_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_108_fu_232_p1);
    sensitive << ( tmp_reg_272 );

    SC_METHOD(thread_tmp_109_fu_215_p1);
    sensitive << ( idx_2_reg_131 );

    SC_METHOD(thread_tmp_54_fu_182_p2);
    sensitive << ( idx_1_reg_109 );

    SC_METHOD(thread_tmp_81_fu_170_p1);
    sensitive << ( y_reg_120 );

    SC_METHOD(thread_tmp_fu_210_p2);
    sensitive << ( tmp_s_reg_249 );
    sensitive << ( x_cast_fu_194_p1 );

    SC_METHOD(thread_tmp_s_fu_174_p3);
    sensitive << ( tmp_81_fu_170_p1 );

    SC_METHOD(thread_x_1_fu_204_p2);
    sensitive << ( x_reg_141 );

    SC_METHOD(thread_x_cast_fu_194_p1);
    sensitive << ( x_reg_141 );

    SC_METHOD(thread_y_1_fu_164_p2);
    sensitive << ( y_reg_120 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_phi_mux_z_phi_fu_90_p4 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond3_fu_158_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_198_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Padding_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_V_address0, "(port)out_V_address0");
    sc_trace(mVcdFile, out_V_ce0, "(port)out_V_ce0");
    sc_trace(mVcdFile, out_V_we0, "(port)out_V_we0");
    sc_trace(mVcdFile, out_V_d0, "(port)out_V_d0");
    sc_trace(mVcdFile, in_V_address0, "(port)in_V_address0");
    sc_trace(mVcdFile, in_V_ce0, "(port)in_V_ce0");
    sc_trace(mVcdFile, in_V_q0, "(port)in_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, idx_6_fu_152_p2, "idx_6_fu_152_p2");
    sc_trace(mVcdFile, idx_6_reg_236, "idx_6_reg_236");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_phi_mux_z_phi_fu_90_p4, "ap_phi_mux_z_phi_fu_90_p4");
    sc_trace(mVcdFile, y_1_fu_164_p2, "y_1_fu_164_p2");
    sc_trace(mVcdFile, y_1_reg_244, "y_1_reg_244");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_s_fu_174_p3, "tmp_s_fu_174_p3");
    sc_trace(mVcdFile, tmp_s_reg_249, "tmp_s_reg_249");
    sc_trace(mVcdFile, exitcond3_fu_158_p2, "exitcond3_fu_158_p2");
    sc_trace(mVcdFile, tmp_54_fu_182_p2, "tmp_54_fu_182_p2");
    sc_trace(mVcdFile, tmp_54_reg_254, "tmp_54_reg_254");
    sc_trace(mVcdFile, indvars_iv_next_fu_188_p2, "indvars_iv_next_fu_188_p2");
    sc_trace(mVcdFile, x_1_fu_204_p2, "x_1_fu_204_p2");
    sc_trace(mVcdFile, x_1_reg_267, "x_1_reg_267");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_fu_210_p2, "tmp_fu_210_p2");
    sc_trace(mVcdFile, tmp_reg_272, "tmp_reg_272");
    sc_trace(mVcdFile, exitcond_fu_198_p2, "exitcond_fu_198_p2");
    sc_trace(mVcdFile, idx_4_fu_220_p2, "idx_4_fu_220_p2");
    sc_trace(mVcdFile, idx_4_reg_282, "idx_4_reg_282");
    sc_trace(mVcdFile, indvars_iv_next2_fu_226_p2, "indvars_iv_next2_fu_226_p2");
    sc_trace(mVcdFile, indvars_iv_reg_61, "indvars_iv_reg_61");
    sc_trace(mVcdFile, idx_reg_73, "idx_reg_73");
    sc_trace(mVcdFile, z_reg_85, "z_reg_85");
    sc_trace(mVcdFile, indvars_iv1_reg_98, "indvars_iv1_reg_98");
    sc_trace(mVcdFile, idx_1_reg_109, "idx_1_reg_109");
    sc_trace(mVcdFile, y_reg_120, "y_reg_120");
    sc_trace(mVcdFile, idx_2_reg_131, "idx_2_reg_131");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, x_reg_141, "x_reg_141");
    sc_trace(mVcdFile, tmp_109_fu_215_p1, "tmp_109_fu_215_p1");
    sc_trace(mVcdFile, tmp_108_fu_232_p1, "tmp_108_fu_232_p1");
    sc_trace(mVcdFile, tmp_81_fu_170_p1, "tmp_81_fu_170_p1");
    sc_trace(mVcdFile, x_cast_fu_194_p1, "x_cast_fu_194_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Padding::~Padding() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Padding::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_0))) {
        idx_1_reg_109 = idx_reg_73.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_198_p2.read()))) {
        idx_1_reg_109 = tmp_54_reg_254.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_158_p2.read()))) {
        idx_2_reg_131 = idx_1_reg_109.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        idx_2_reg_131 = idx_4_reg_282.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idx_reg_73 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_158_p2.read(), ap_const_lv1_1))) {
        idx_reg_73 = idx_6_reg_236.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_0))) {
        indvars_iv1_reg_98 = indvars_iv_reg_61.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_198_p2.read()))) {
        indvars_iv1_reg_98 = indvars_iv_next2_fu_226_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_61 = ap_const_lv11_20;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_158_p2.read(), ap_const_lv1_1))) {
        indvars_iv_reg_61 = indvars_iv_next_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_158_p2.read()))) {
        x_reg_141 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        x_reg_141 = x_1_reg_267.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_0))) {
        y_reg_120 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_198_p2.read()))) {
        y_reg_120 = y_1_reg_244.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        z_reg_85 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_158_p2.read(), ap_const_lv1_1))) {
        z_reg_85 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_198_p2.read()))) {
        idx_4_reg_282 = idx_4_fu_220_p2.read();
        tmp_reg_272 = tmp_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_0))) {
        idx_6_reg_236 = idx_6_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_158_p2.read()))) {
        tmp_54_reg_254 = tmp_54_fu_182_p2.read();
        tmp_s_reg_249 = tmp_s_fu_174_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_1_reg_267 = x_1_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        y_1_reg_244 = y_1_fu_164_p2.read();
    }
}

void Padding::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Padding::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Padding::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Padding::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Padding::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Padding::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Padding::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Padding::thread_ap_phi_mux_z_phi_fu_90_p4() {
    ap_phi_mux_z_phi_fu_90_p4 = z_reg_85.read();
}

void Padding::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Padding::thread_exitcond3_fu_158_p2() {
    exitcond3_fu_158_p2 = (!y_reg_120.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(y_reg_120.read() == ap_const_lv6_20);
}

void Padding::thread_exitcond_fu_198_p2() {
    exitcond_fu_198_p2 = (!idx_2_reg_131.read().is_01() || !indvars_iv1_reg_98.read().is_01())? sc_lv<1>(): sc_lv<1>(idx_2_reg_131.read() == indvars_iv1_reg_98.read());
}

void Padding::thread_idx_4_fu_220_p2() {
    idx_4_fu_220_p2 = (!idx_2_reg_131.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(idx_2_reg_131.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Padding::thread_idx_6_fu_152_p2() {
    idx_6_fu_152_p2 = (idx_reg_73.read() ^ ap_const_lv11_400);
}

void Padding::thread_in_V_address0() {
    in_V_address0 =  (sc_lv<10>) (tmp_109_fu_215_p1.read());
}

void Padding::thread_in_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_ce0 = ap_const_logic_1;
    } else {
        in_V_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_indvars_iv_next2_fu_226_p2() {
    indvars_iv_next2_fu_226_p2 = (!indvars_iv1_reg_98.read().is_01() || !ap_const_lv11_20.is_01())? sc_lv<11>(): (sc_biguint<11>(indvars_iv1_reg_98.read()) + sc_biguint<11>(ap_const_lv11_20));
}

void Padding::thread_indvars_iv_next_fu_188_p2() {
    indvars_iv_next_fu_188_p2 = (indvars_iv_reg_61.read() ^ ap_const_lv11_400);
}

void Padding::thread_out_V_address0() {
    out_V_address0 =  (sc_lv<10>) (tmp_108_fu_232_p1.read());
}

void Padding::thread_out_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_V_ce0 = ap_const_logic_1;
    } else {
        out_V_ce0 = ap_const_logic_0;
    }
}

void Padding::thread_out_V_d0() {
    out_V_d0 = in_V_q0.read();
}

void Padding::thread_out_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        out_V_we0 = ap_const_logic_1;
    } else {
        out_V_we0 = ap_const_logic_0;
    }
}

void Padding::thread_tmp_108_fu_232_p1() {
    tmp_108_fu_232_p1 = esl_zext<64,10>(tmp_reg_272.read());
}

void Padding::thread_tmp_109_fu_215_p1() {
    tmp_109_fu_215_p1 = esl_zext<64,11>(idx_2_reg_131.read());
}

void Padding::thread_tmp_54_fu_182_p2() {
    tmp_54_fu_182_p2 = (!ap_const_lv11_20.is_01() || !idx_1_reg_109.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_20) + sc_biguint<11>(idx_1_reg_109.read()));
}

void Padding::thread_tmp_81_fu_170_p1() {
    tmp_81_fu_170_p1 = y_reg_120.read().range(5-1, 0);
}

void Padding::thread_tmp_fu_210_p2() {
    tmp_fu_210_p2 = (!tmp_s_reg_249.read().is_01() || !x_cast_fu_194_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_s_reg_249.read()) + sc_biguint<10>(x_cast_fu_194_p1.read()));
}

void Padding::thread_tmp_s_fu_174_p3() {
    tmp_s_fu_174_p3 = esl_concat<5,5>(tmp_81_fu_170_p1.read(), ap_const_lv5_0);
}

void Padding::thread_x_1_fu_204_p2() {
    x_1_fu_204_p2 = (!x_reg_141.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(x_reg_141.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void Padding::thread_x_cast_fu_194_p1() {
    x_cast_fu_194_p1 = esl_zext<10,6>(x_reg_141.read());
}

void Padding::thread_y_1_fu_164_p2() {
    y_1_fu_164_p2 = (!y_reg_120.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(y_reg_120.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void Padding::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_phi_mux_z_phi_fu_90_p4.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond3_fu_158_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_198_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

