-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity forward_conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_input_data_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_layer_5_120_1_0_5_5_16_input_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_input_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_120_1_0_5_5_16_output_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_layer_5_120_1_0_5_5_16_output_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_output_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_output_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_120_1_0_5_5_16_W_data_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_120_1_0_5_5_16_W_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_W_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0 : OUT STD_LOGIC;
    conv_layer_5_120_1_0_5_5_16_inpad_data_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_layer_5_120_1_0_5_5_16_inpad_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of forward_conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110010000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul2_fu_264_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul2_reg_517 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal idx_filter_fu_276_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal idx_filter_reg_525 : STD_LOGIC_VECTOR (6 downto 0);
    signal v_6_cast9_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_6_cast9_reg_530 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v_6_cast_fu_286_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal v_6_cast_reg_535 : STD_LOGIC_VECTOR (2 downto 0);
    signal ho_4_cast_fu_296_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ho_4_cast_reg_543 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_y_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next3_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_mul_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_562 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ch_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ch_reg_570 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_x_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_363_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_x_assign_8_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_x_assign_8_reg_588 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond4_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_reg_597 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_reg_602 : STD_LOGIC_VECTOR (8 downto 0);
    signal ho_fu_455_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ho_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal v_fu_461_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal conv_layer_inpad_da_1_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal conv_layer_W_data_V_1_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_Padding_2_fu_256_ap_start : STD_LOGIC;
    signal grp_Padding_2_fu_256_ap_done : STD_LOGIC;
    signal grp_Padding_2_fu_256_ap_idle : STD_LOGIC;
    signal grp_Padding_2_fu_256_ap_ready : STD_LOGIC;
    signal grp_Padding_2_fu_256_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Padding_2_fu_256_out_V_ce0 : STD_LOGIC;
    signal grp_Padding_2_fu_256_out_V_we0 : STD_LOGIC;
    signal grp_Padding_2_fu_256_out_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Padding_2_fu_256_in_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Padding_2_fu_256_in_V_ce0 : STD_LOGIC;
    signal p_z_assign_reg_105 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond7_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_117 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvars_iv2_reg_129 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_2_reg_141 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal ho_1_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_177 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_z_assign_3_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_201 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_082_2_reg_213 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_x_assign_7_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_3_reg_235 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_assign_9_reg_247 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Padding_2_fu_256_ap_start_reg : STD_LOGIC := '0';
    signal tmp_75_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_cast_fu_342_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_x_assign_9_cast7_fu_369_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_fu_395_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_cast_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_y_assign_9_cast6_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_y_assign_s_fu_418_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_427_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_439_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_y_assign_10_cast4_fu_423_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_cast_fu_471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component Padding_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lenet_mac_muladd_16s_16s_28ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    grp_Padding_2_fu_256 : component Padding_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_2_fu_256_ap_start,
        ap_done => grp_Padding_2_fu_256_ap_done,
        ap_idle => grp_Padding_2_fu_256_ap_idle,
        ap_ready => grp_Padding_2_fu_256_ap_ready,
        out_V_address0 => grp_Padding_2_fu_256_out_V_address0,
        out_V_ce0 => grp_Padding_2_fu_256_out_V_ce0,
        out_V_we0 => grp_Padding_2_fu_256_out_V_we0,
        out_V_d0 => grp_Padding_2_fu_256_out_V_d0,
        in_V_address0 => grp_Padding_2_fu_256_in_V_address0,
        in_V_ce0 => grp_Padding_2_fu_256_in_V_ce0,
        in_V_q0 => conv_layer_5_120_1_0_5_5_16_input_data_V_q0);

    lenet_mac_muladd_16s_16s_28ns_28_1_1_U42 : component lenet_mac_muladd_16s_16s_28ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => conv_layer_W_data_V_1_reg_632,
        din1 => conv_layer_inpad_da_1_reg_627,
        din2 => grp_fu_508_p2,
        dout => grp_fu_508_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Padding_2_fu_256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_2_fu_256_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Padding_2_fu_256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_2_fu_256_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_2_fu_256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ho_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_290_p2 = ap_const_lv1_0))) then 
                ho_1_reg_165 <= ap_const_lv1_0;
            elsif (((exitcond5_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ho_1_reg_165 <= idx_x_fu_357_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_270_p2 = ap_const_lv1_0))) then 
                indvars_iv2_reg_129 <= ap_const_lv3_5;
            elsif (((exitcond6_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvars_iv2_reg_129 <= indvars_iv_next3_fu_312_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_290_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_153 <= ap_const_lv3_5;
            elsif (((exitcond5_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvars_iv_reg_153 <= indvars_iv_next_fu_363_p2;
            end if; 
        end if;
    end process;

    p_082_2_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_324_p2 = ap_const_lv1_0))) then 
                p_082_2_reg_213 <= p_Val2_s_reg_177;
            elsif (((exitcond1_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_082_2_reg_213 <= p_Val2_3_reg_235;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond4_fu_373_p2 = ap_const_lv1_0))) then 
                p_Val2_3_reg_235 <= p_082_2_reg_213;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_3_reg_235 <= grp_fu_508_p3(27 downto 12);
            end if; 
        end if;
    end process;

    p_Val2_s_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_s_reg_177 <= ap_const_lv16_0;
            elsif (((exitcond4_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_Val2_s_reg_177 <= p_082_2_reg_213;
            end if; 
        end if;
    end process;

    p_x_assign_7_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_324_p2 = ap_const_lv1_0))) then 
                p_x_assign_7_reg_225 <= v_6_cast_reg_535;
            elsif (((exitcond1_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_x_assign_7_reg_225 <= v_fu_461_p2;
            end if; 
        end if;
    end process;

    p_y_assign_9_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond4_fu_373_p2 = ap_const_lv1_0))) then 
                p_y_assign_9_reg_247 <= ho_4_cast_reg_543;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_y_assign_9_reg_247 <= ho_reg_607;
            end if; 
        end if;
    end process;

    p_z_assign_3_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_z_assign_3_reg_190 <= ap_const_lv5_0;
            elsif (((exitcond4_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_z_assign_3_reg_190 <= ch_reg_570;
            end if; 
        end if;
    end process;

    p_z_assign_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_z_assign_reg_105 <= idx_filter_reg_525;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_2_fu_256_ap_done = ap_const_logic_1))) then 
                p_z_assign_reg_105 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul1_reg_117 <= next_mul2_reg_517;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_2_fu_256_ap_done = ap_const_logic_1))) then 
                phi_mul1_reg_117 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_201 <= ap_const_lv9_0;
            elsif (((exitcond4_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_201 <= next_mul_reg_562;
            end if; 
        end if;
    end process;

    v_2_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_270_p2 = ap_const_lv1_0))) then 
                v_2_reg_141 <= ap_const_lv1_0;
            elsif (((exitcond6_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                v_2_reg_141 <= idx_y_fu_306_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ch_reg_570 <= ch_fu_330_p2;
                next_mul_reg_562 <= next_mul_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                conv_layer_W_data_V_1_reg_632 <= conv_layer_5_120_1_0_5_5_16_W_data_V_q0;
                conv_layer_inpad_da_1_reg_627 <= conv_layer_5_120_1_0_5_5_16_inpad_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    ho_4_cast_reg_543(0) <= ho_4_cast_fu_296_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_389_p2 = ap_const_lv1_0))) then
                ho_reg_607 <= ho_fu_455_p2;
                tmp_76_reg_597 <= tmp_76_fu_412_p2;
                tmp_79_reg_602 <= tmp_79_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                idx_filter_reg_525 <= idx_filter_fu_276_p2;
                next_mul2_reg_517 <= next_mul2_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond4_fu_373_p2 = ap_const_lv1_0))) then
                p_x_assign_8_reg_588 <= p_x_assign_8_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    v_6_cast9_reg_530(0) <= v_6_cast9_fu_282_p1(0);
                    v_6_cast_reg_535(0) <= v_6_cast_fu_286_p1(0);
            end if;
        end if;
    end process;
    v_6_cast9_reg_530(8 downto 1) <= "00000000";
    v_6_cast_reg_535(2 downto 1) <= "00";
    ho_4_cast_reg_543(2 downto 1) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond6_fu_300_p2, ap_CS_fsm_state6, exitcond5_fu_324_p2, ap_CS_fsm_state7, exitcond4_fu_373_p2, ap_CS_fsm_state8, exitcond1_fu_389_p2, grp_Padding_2_fu_256_ap_done, ap_CS_fsm_state2, exitcond7_fu_290_p2, exitcond_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Padding_2_fu_256_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond7_fu_290_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond6_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond4_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond1_fu_389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_fu_270_p2)
    begin
        if ((((exitcond_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_270_p2)
    begin
        if (((exitcond_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ch_fu_330_p2 <= std_logic_vector(unsigned(p_z_assign_3_reg_190) + unsigned(ap_const_lv5_1));
    conv_layer_5_120_1_0_5_5_16_W_data_V_address0 <= tmp_105_cast_fu_480_p1(16 - 1 downto 0);

    conv_layer_5_120_1_0_5_5_16_W_data_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_120_1_0_5_5_16_W_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_120_1_0_5_5_16_W_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0_assign_proc : process(ap_CS_fsm_state9, grp_Padding_2_fu_256_out_V_address0, ap_CS_fsm_state2, tmp_77_fu_467_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 <= tmp_77_fu_467_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 <= grp_Padding_2_fu_256_out_V_address0;
        else 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0_assign_proc : process(ap_CS_fsm_state9, grp_Padding_2_fu_256_out_V_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 <= grp_Padding_2_fu_256_out_V_ce0;
        else 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_120_1_0_5_5_16_inpad_data_V_d0 <= grp_Padding_2_fu_256_out_V_d0;

    conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0_assign_proc : process(grp_Padding_2_fu_256_out_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0 <= grp_Padding_2_fu_256_out_V_we0;
        else 
            conv_layer_5_120_1_0_5_5_16_inpad_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_120_1_0_5_5_16_input_data_V_address0 <= grp_Padding_2_fu_256_in_V_address0;
    conv_layer_5_120_1_0_5_5_16_input_data_V_ce0 <= grp_Padding_2_fu_256_in_V_ce0;
    conv_layer_5_120_1_0_5_5_16_output_data_V_address0 <= tmp_75_fu_352_p1(7 - 1 downto 0);

    conv_layer_5_120_1_0_5_5_16_output_data_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_layer_5_120_1_0_5_5_16_output_data_V_ce0 <= ap_const_logic_1;
        else 
            conv_layer_5_120_1_0_5_5_16_output_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_layer_5_120_1_0_5_5_16_output_data_V_d0 <= p_Val2_s_reg_177;

    conv_layer_5_120_1_0_5_5_16_output_data_V_we0_assign_proc : process(ap_CS_fsm_state6, exitcond5_fu_324_p2)
    begin
        if (((exitcond5_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv_layer_5_120_1_0_5_5_16_output_data_V_we0 <= ap_const_logic_1;
        else 
            conv_layer_5_120_1_0_5_5_16_output_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_389_p2 <= "1" when (p_y_assign_9_reg_247 = indvars_iv_reg_153) else "0";
    exitcond4_fu_373_p2 <= "1" when (p_x_assign_7_reg_225 = indvars_iv2_reg_129) else "0";
    exitcond5_fu_324_p2 <= "1" when (p_z_assign_3_reg_190 = ap_const_lv5_10) else "0";
    exitcond6_fu_300_p2 <= "1" when (indvars_iv_reg_153 = ap_const_lv3_6) else "0";
    exitcond7_fu_290_p2 <= "1" when (indvars_iv2_reg_129 = ap_const_lv3_6) else "0";
    exitcond_fu_270_p2 <= "1" when (p_z_assign_reg_105 = ap_const_lv7_78) else "0";
    grp_Padding_2_fu_256_ap_start <= grp_Padding_2_fu_256_ap_start_reg;
    grp_fu_508_p2 <= (p_Val2_3_reg_235 & ap_const_lv12_0);
    ho_4_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ho_1_reg_165),3));
    ho_fu_455_p2 <= std_logic_vector(unsigned(p_y_assign_9_reg_247) + unsigned(ap_const_lv3_1));
    idx_filter_fu_276_p2 <= std_logic_vector(unsigned(p_z_assign_reg_105) + unsigned(ap_const_lv7_1));
    idx_x_fu_357_p2 <= (ho_1_reg_165 xor ap_const_lv1_1);
    idx_y_fu_306_p2 <= (v_2_reg_141 xor ap_const_lv1_1);
    indvars_iv_next3_fu_312_p2 <= std_logic_vector(unsigned(indvars_iv2_reg_129) + unsigned(ap_const_lv3_1));
    indvars_iv_next_fu_363_p2 <= std_logic_vector(unsigned(indvars_iv_reg_153) + unsigned(ap_const_lv3_1));
    next_mul2_fu_264_p2 <= std_logic_vector(unsigned(phi_mul1_reg_117) + unsigned(ap_const_lv16_190));
    next_mul_fu_318_p2 <= std_logic_vector(unsigned(phi_mul_reg_201) + unsigned(ap_const_lv9_19));
    p_shl5_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_395_p3),9));
    p_shl5_fu_395_p3 <= (p_y_assign_9_reg_247 & ap_const_lv2_0);
    p_shl_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_427_p3),9));
    p_shl_fu_427_p3 <= (p_y_assign_s_fu_418_p2 & ap_const_lv2_0);
    p_x_assign_8_fu_379_p2 <= std_logic_vector(unsigned(p_x_assign_9_cast7_fu_369_p1) + unsigned(phi_mul_reg_201));
    p_x_assign_9_cast7_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_x_assign_7_reg_225),9));
    p_y_assign_10_cast4_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_assign_s_fu_418_p2),9));
    p_y_assign_9_cast6_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_assign_9_reg_247),9));
    p_y_assign_s_fu_418_p2 <= std_logic_vector(unsigned(p_y_assign_9_reg_247) - unsigned(ho_4_cast_reg_543));
    tmp1_fu_407_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_403_p1) + unsigned(p_x_assign_8_reg_588));
    tmp2_fu_439_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_435_p1) + unsigned(p_x_assign_8_reg_588));
    tmp3_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_336_p2),7));
    tmp3_fu_336_p2 <= (v_2_reg_141 xor ho_1_reg_165);
    tmp_103_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_reg_602),16));
    tmp_105_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_474_p2),64));
    tmp_75_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_346_p2),64));
    tmp_76_fu_412_p2 <= std_logic_vector(unsigned(tmp1_fu_407_p2) + unsigned(p_y_assign_9_cast6_fu_385_p1));
    tmp_77_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_reg_597),64));
    tmp_78_fu_444_p2 <= std_logic_vector(unsigned(tmp2_fu_439_p2) + unsigned(p_y_assign_10_cast4_fu_423_p1));
    tmp_79_fu_450_p2 <= std_logic_vector(unsigned(tmp_78_fu_444_p2) - unsigned(v_6_cast9_reg_530));
    tmp_80_fu_474_p2 <= std_logic_vector(unsigned(tmp_103_cast_fu_471_p1) + unsigned(phi_mul1_reg_117));
    tmp_s_fu_346_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_342_p1) + unsigned(p_z_assign_reg_105));
    v_6_cast9_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_2_reg_141),9));
    v_6_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_2_reg_141),3));
    v_fu_461_p2 <= std_logic_vector(unsigned(p_x_assign_7_reg_225) + unsigned(ap_const_lv3_1));
end behav;
