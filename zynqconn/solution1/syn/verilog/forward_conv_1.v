// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_layer_5_16_1_0_14_14_6_input_data_V_address0,
        conv_layer_5_16_1_0_14_14_6_input_data_V_ce0,
        conv_layer_5_16_1_0_14_14_6_input_data_V_q0,
        conv_layer_5_16_1_0_14_14_6_output_data_V_address0,
        conv_layer_5_16_1_0_14_14_6_output_data_V_ce0,
        conv_layer_5_16_1_0_14_14_6_output_data_V_we0,
        conv_layer_5_16_1_0_14_14_6_output_data_V_d0,
        conv_layer_5_16_1_0_14_14_6_W_data_V_address0,
        conv_layer_5_16_1_0_14_14_6_W_data_V_ce0,
        conv_layer_5_16_1_0_14_14_6_W_data_V_q0,
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0,
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0,
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0,
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_d0,
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv_layer_5_16_1_0_14_14_6_input_data_V_address0;
output   conv_layer_5_16_1_0_14_14_6_input_data_V_ce0;
input  [15:0] conv_layer_5_16_1_0_14_14_6_input_data_V_q0;
output  [10:0] conv_layer_5_16_1_0_14_14_6_output_data_V_address0;
output   conv_layer_5_16_1_0_14_14_6_output_data_V_ce0;
output   conv_layer_5_16_1_0_14_14_6_output_data_V_we0;
output  [15:0] conv_layer_5_16_1_0_14_14_6_output_data_V_d0;
output  [11:0] conv_layer_5_16_1_0_14_14_6_W_data_V_address0;
output   conv_layer_5_16_1_0_14_14_6_W_data_V_ce0;
input  [15:0] conv_layer_5_16_1_0_14_14_6_W_data_V_q0;
output  [10:0] conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0;
output   conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0;
output   conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0;
output  [15:0] conv_layer_5_16_1_0_14_14_6_inpad_data_V_d0;
input  [15:0] conv_layer_5_16_1_0_14_14_6_inpad_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_layer_5_16_1_0_14_14_6_output_data_V_ce0;
reg conv_layer_5_16_1_0_14_14_6_output_data_V_we0;
reg conv_layer_5_16_1_0_14_14_6_W_data_V_ce0;
reg[10:0] conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0;
reg conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0;
reg conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] phi_mul3_cast_fu_270_p1;
reg   [12:0] phi_mul3_cast_reg_569;
wire    ap_CS_fsm_state3;
wire   [10:0] next_mul6_fu_274_p2;
reg   [10:0] next_mul6_reg_574;
wire   [11:0] next_mul4_fu_280_p2;
reg   [11:0] next_mul4_reg_579;
wire   [4:0] idx_filter_fu_292_p2;
reg   [4:0] idx_filter_reg_587;
wire   [31:0] v_5_cast1_fu_302_p1;
reg   [31:0] v_5_cast1_reg_592;
wire    ap_CS_fsm_state4;
wire   [3:0] idx_y_fu_312_p2;
reg   [3:0] idx_y_reg_600;
wire   [31:0] tmp_128_cast_fu_324_p1;
reg   [31:0] tmp_128_cast_reg_605;
wire   [0:0] exitcond3_fu_306_p2;
wire   [10:0] tmp4_fu_328_p2;
reg   [10:0] tmp4_reg_610;
wire   [31:0] ho_3_cast8_fu_334_p1;
reg   [31:0] ho_3_cast8_reg_615;
wire    ap_CS_fsm_state5;
wire   [3:0] idx_x_fu_344_p2;
reg   [3:0] idx_x_reg_624;
wire   [31:0] tmp_130_cast_fu_356_p1;
reg   [31:0] tmp_130_cast_reg_629;
wire   [0:0] exitcond2_fu_338_p2;
wire   [7:0] next_mul2_fu_360_p2;
reg   [7:0] next_mul2_reg_634;
wire    ap_CS_fsm_state6;
wire   [10:0] next_mul_fu_366_p2;
reg   [10:0] next_mul_reg_639;
wire   [2:0] ch_fu_378_p2;
reg   [2:0] ch_reg_647;
wire   [31:0] tmp_134_cast_fu_384_p1;
reg   [31:0] tmp_134_cast_reg_652;
wire   [0:0] exitcond1_fu_372_p2;
wire   [31:0] tmp_135_cast_fu_388_p1;
reg   [31:0] tmp_135_cast_reg_657;
wire   [31:0] tmp3_fu_437_p2;
reg   [31:0] tmp3_reg_665;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_85_fu_432_p2;
wire   [31:0] tmp_88_fu_471_p2;
reg   [31:0] tmp_88_reg_673;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_86_fu_442_p2;
wire   [12:0] tmp_64_fu_498_p1;
reg   [12:0] tmp_64_reg_678;
wire   [31:0] ho_fu_502_p2;
reg   [31:0] ho_reg_683;
wire   [31:0] v_fu_508_p2;
wire    ap_CS_fsm_state9;
reg  signed [15:0] conv_layer_inpad_da_2_reg_703;
wire    ap_CS_fsm_state10;
reg  signed [15:0] conv_layer_W_data_V_2_reg_708;
wire    ap_CS_fsm_state11;
wire    grp_Padding_1_fu_262_ap_start;
wire    grp_Padding_1_fu_262_ap_done;
wire    grp_Padding_1_fu_262_ap_idle;
wire    grp_Padding_1_fu_262_ap_ready;
wire   [10:0] grp_Padding_1_fu_262_out_V_address0;
wire    grp_Padding_1_fu_262_out_V_ce0;
wire    grp_Padding_1_fu_262_out_V_we0;
wire   [15:0] grp_Padding_1_fu_262_out_V_d0;
wire   [10:0] grp_Padding_1_fu_262_in_V_address0;
wire    grp_Padding_1_fu_262_in_V_ce0;
reg   [4:0] p_z_assign_reg_115;
wire    ap_CS_fsm_state2;
reg   [11:0] phi_mul3_reg_126;
reg   [10:0] phi_mul5_reg_137;
reg   [3:0] v_3_reg_149;
wire   [0:0] exitcond_fu_286_p2;
reg   [3:0] ho_2_reg_161;
reg   [15:0] p_Val2_s_reg_173;
reg   [2:0] p_z_assign_2_reg_186;
reg   [10:0] phi_mul_reg_197;
reg   [7:0] phi_mul1_reg_208;
reg   [15:0] p_082_2_reg_219;
reg   [31:0] p_x_assign_6_reg_231;
reg   [15:0] p_Val2_5_reg_241;
reg   [31:0] p_y_assign_7_reg_253;
reg    grp_Padding_1_fu_262_ap_start_reg;
wire   [63:0] tmp_84_fu_427_p1;
wire   [63:0] tmp_124_cast_fu_532_p1;
wire  signed [63:0] tmp_89_fu_514_p1;
wire   [3:0] tmp_s_fu_318_p2;
wire   [10:0] v_5_cast_fu_298_p1;
wire   [3:0] tmp_82_fu_350_p2;
wire   [4:0] p_shl2_fu_400_p3;
wire   [6:0] p_shl2_cast_fu_408_p1;
wire   [6:0] p_shl1_fu_392_p3;
wire   [6:0] tmp5_fu_412_p2;
wire   [10:0] tmp5_cast_fu_418_p1;
wire   [10:0] tmp_83_fu_422_p2;
wire   [31:0] tmp_fu_447_p2;
wire   [31:0] tmp_62_fu_453_p2;
wire   [31:0] tmp_87_fu_459_p2;
wire   [31:0] tmp1_fu_465_p2;
wire   [31:0] p_y_assign_8_fu_476_p2;
wire   [31:0] tmp_63_fu_481_p2;
wire   [31:0] tmp2_fu_487_p2;
wire   [31:0] tmp_90_fu_493_p2;
wire   [12:0] tmp_65_fu_518_p1;
wire   [12:0] tmp_66_fu_522_p2;
wire   [12:0] tmp_91_fu_527_p2;
wire  signed [27:0] grp_fu_560_p3;
wire   [27:0] grp_fu_560_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_Padding_1_fu_262_ap_start_reg = 1'b0;
end

Padding_1 grp_Padding_1_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_1_fu_262_ap_start),
    .ap_done(grp_Padding_1_fu_262_ap_done),
    .ap_idle(grp_Padding_1_fu_262_ap_idle),
    .ap_ready(grp_Padding_1_fu_262_ap_ready),
    .out_V_address0(grp_Padding_1_fu_262_out_V_address0),
    .out_V_ce0(grp_Padding_1_fu_262_out_V_ce0),
    .out_V_we0(grp_Padding_1_fu_262_out_V_we0),
    .out_V_d0(grp_Padding_1_fu_262_out_V_d0),
    .in_V_address0(grp_Padding_1_fu_262_in_V_address0),
    .in_V_ce0(grp_Padding_1_fu_262_in_V_ce0),
    .in_V_q0(conv_layer_5_16_1_0_14_14_6_input_data_V_q0)
);

lenet_mac_muladd_16s_16s_28ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 28 ),
    .dout_WIDTH( 28 ))
lenet_mac_muladd_16s_16s_28ns_28_1_1_U23(
    .din0(conv_layer_inpad_da_2_reg_703),
    .din1(conv_layer_W_data_V_2_reg_708),
    .din2(grp_fu_560_p2),
    .dout(grp_fu_560_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_1_fu_262_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_Padding_1_fu_262_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_1_fu_262_ap_ready == 1'b1)) begin
            grp_Padding_1_fu_262_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ho_2_reg_161 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_372_p2 == 1'd1))) begin
        ho_2_reg_161 <= idx_x_reg_624;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_082_2_reg_219 <= p_Val2_s_reg_173;
    end else if (((tmp_86_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_082_2_reg_219 <= p_Val2_5_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_85_fu_432_p2 == 1'd1))) begin
        p_Val2_5_reg_241 <= p_082_2_reg_219;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_5_reg_241 <= {{grp_fu_560_p3[27:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_85_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_Val2_s_reg_173 <= p_082_2_reg_219;
    end else if (((exitcond2_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_s_reg_173 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_6_reg_231 <= v_5_cast1_reg_592;
    end else if (((tmp_86_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_x_assign_6_reg_231 <= v_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_85_fu_432_p2 == 1'd1))) begin
        p_y_assign_7_reg_253 <= ho_3_cast8_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_y_assign_7_reg_253 <= ho_reg_683;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_85_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_z_assign_2_reg_186 <= ch_reg_647;
    end else if (((exitcond2_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_z_assign_2_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_z_assign_reg_115 <= idx_filter_reg_587;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_1_fu_262_ap_done == 1'b1))) begin
        p_z_assign_reg_115 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_85_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul1_reg_208 <= next_mul2_reg_634;
    end else if (((exitcond2_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul1_reg_208 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul3_reg_126 <= next_mul4_reg_579;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_1_fu_262_ap_done == 1'b1))) begin
        phi_mul3_reg_126 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul5_reg_137 <= next_mul6_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_1_fu_262_ap_done == 1'b1))) begin
        phi_mul5_reg_137 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_85_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_reg_197 <= next_mul_reg_639;
    end else if (((exitcond2_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_197 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_3_reg_149 <= 4'd0;
    end else if (((exitcond2_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        v_3_reg_149 <= idx_y_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ch_reg_647 <= ch_fu_378_p2;
        next_mul2_reg_634 <= next_mul2_fu_360_p2;
        next_mul_reg_639 <= next_mul_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_layer_W_data_V_2_reg_708 <= conv_layer_5_16_1_0_14_14_6_W_data_V_q0;
        conv_layer_inpad_da_2_reg_703 <= conv_layer_5_16_1_0_14_14_6_inpad_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ho_3_cast8_reg_615[3 : 0] <= ho_3_cast8_fu_334_p1[3 : 0];
        idx_x_reg_624 <= idx_x_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_86_fu_442_p2 == 1'd1))) begin
        ho_reg_683 <= ho_fu_502_p2;
        tmp_64_reg_678 <= tmp_64_fu_498_p1;
        tmp_88_reg_673 <= tmp_88_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_filter_reg_587 <= idx_filter_fu_292_p2;
        next_mul4_reg_579 <= next_mul4_fu_280_p2;
        next_mul6_reg_574 <= next_mul6_fu_274_p2;
        phi_mul3_cast_reg_569[11 : 0] <= phi_mul3_cast_fu_270_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        idx_y_reg_600 <= idx_y_fu_312_p2;
        v_5_cast1_reg_592[3 : 0] <= v_5_cast1_fu_302_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_85_fu_432_p2 == 1'd1))) begin
        tmp3_reg_665 <= tmp3_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp4_reg_610 <= tmp4_fu_328_p2;
        tmp_128_cast_reg_605[3 : 0] <= tmp_128_cast_fu_324_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_130_cast_reg_629[3 : 0] <= tmp_130_cast_fu_356_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_372_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_134_cast_reg_652[10 : 0] <= tmp_134_cast_fu_384_p1[10 : 0];
        tmp_135_cast_reg_657[7 : 0] <= tmp_135_cast_fu_388_p1[7 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_286_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_286_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_16_1_0_14_14_6_W_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_16_1_0_14_14_6_W_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 = tmp_89_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 = grp_Padding_1_fu_262_out_V_address0;
    end else begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 = grp_Padding_1_fu_262_out_V_ce0;
    end else begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0 = grp_Padding_1_fu_262_out_V_we0;
    end else begin
        conv_layer_5_16_1_0_14_14_6_inpad_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_layer_5_16_1_0_14_14_6_output_data_V_ce0 = 1'b1;
    end else begin
        conv_layer_5_16_1_0_14_14_6_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_372_p2 == 1'd1))) begin
        conv_layer_5_16_1_0_14_14_6_output_data_V_we0 = 1'b1;
    end else begin
        conv_layer_5_16_1_0_14_14_6_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_Padding_1_fu_262_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_85_fu_432_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_86_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ch_fu_378_p2 = (p_z_assign_2_reg_186 + 3'd1);

assign conv_layer_5_16_1_0_14_14_6_W_data_V_address0 = tmp_124_cast_fu_532_p1;

assign conv_layer_5_16_1_0_14_14_6_inpad_data_V_d0 = grp_Padding_1_fu_262_out_V_d0;

assign conv_layer_5_16_1_0_14_14_6_input_data_V_address0 = grp_Padding_1_fu_262_in_V_address0;

assign conv_layer_5_16_1_0_14_14_6_input_data_V_ce0 = grp_Padding_1_fu_262_in_V_ce0;

assign conv_layer_5_16_1_0_14_14_6_output_data_V_address0 = tmp_84_fu_427_p1;

assign conv_layer_5_16_1_0_14_14_6_output_data_V_d0 = p_Val2_s_reg_173;

assign exitcond1_fu_372_p2 = ((p_z_assign_2_reg_186 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_338_p2 = ((ho_2_reg_161 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_306_p2 = ((v_3_reg_149 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_286_p2 = ((p_z_assign_reg_115 == 5'd16) ? 1'b1 : 1'b0);

assign grp_Padding_1_fu_262_ap_start = grp_Padding_1_fu_262_ap_start_reg;

assign grp_fu_560_p2 = {{p_Val2_5_reg_241}, {12'd0}};

assign ho_3_cast8_fu_334_p1 = ho_2_reg_161;

assign ho_fu_502_p2 = (32'd1 + p_y_assign_7_reg_253);

assign idx_filter_fu_292_p2 = (p_z_assign_reg_115 + 5'd1);

assign idx_x_fu_344_p2 = (ho_2_reg_161 + 4'd1);

assign idx_y_fu_312_p2 = (v_3_reg_149 + 4'd1);

assign next_mul2_fu_360_p2 = (phi_mul1_reg_208 + 8'd25);

assign next_mul4_fu_280_p2 = (phi_mul3_reg_126 + 12'd150);

assign next_mul6_fu_274_p2 = (phi_mul5_reg_137 + 11'd100);

assign next_mul_fu_366_p2 = (phi_mul_reg_197 + 11'd196);

assign p_shl1_fu_392_p3 = {{ho_2_reg_161}, {3'd0}};

assign p_shl2_cast_fu_408_p1 = p_shl2_fu_400_p3;

assign p_shl2_fu_400_p3 = {{ho_2_reg_161}, {1'd0}};

assign p_y_assign_8_fu_476_p2 = (p_y_assign_7_reg_253 - ho_3_cast8_reg_615);

assign phi_mul3_cast_fu_270_p1 = phi_mul3_reg_126;

assign tmp1_fu_465_p2 = (p_x_assign_6_reg_231 + tmp_87_fu_459_p2);

assign tmp2_fu_487_p2 = (tmp_63_fu_481_p2 + p_y_assign_8_fu_476_p2);

assign tmp3_fu_437_p2 = (p_x_assign_6_reg_231 + tmp_135_cast_reg_657);

assign tmp4_fu_328_p2 = (v_5_cast_fu_298_p1 + phi_mul5_reg_137);

assign tmp5_cast_fu_418_p1 = tmp5_fu_412_p2;

assign tmp5_fu_412_p2 = (p_shl2_cast_fu_408_p1 + p_shl1_fu_392_p3);

assign tmp_124_cast_fu_532_p1 = tmp_91_fu_527_p2;

assign tmp_128_cast_fu_324_p1 = tmp_s_fu_318_p2;

assign tmp_130_cast_fu_356_p1 = tmp_82_fu_350_p2;

assign tmp_134_cast_fu_384_p1 = phi_mul_reg_197;

assign tmp_135_cast_fu_388_p1 = phi_mul1_reg_208;

assign tmp_62_fu_453_p2 = p_y_assign_7_reg_253 << 32'd1;

assign tmp_63_fu_481_p2 = p_y_assign_8_fu_476_p2 << 32'd2;

assign tmp_64_fu_498_p1 = tmp_90_fu_493_p2[12:0];

assign tmp_65_fu_518_p1 = v_3_reg_149;

assign tmp_66_fu_522_p2 = (tmp_64_reg_678 - tmp_65_fu_518_p1);

assign tmp_82_fu_350_p2 = (ho_2_reg_161 + 4'd5);

assign tmp_83_fu_422_p2 = (tmp4_reg_610 + tmp5_cast_fu_418_p1);

assign tmp_84_fu_427_p1 = tmp_83_fu_422_p2;

assign tmp_85_fu_432_p2 = (($signed(p_x_assign_6_reg_231) < $signed(tmp_128_cast_reg_605)) ? 1'b1 : 1'b0);

assign tmp_86_fu_442_p2 = (($signed(p_y_assign_7_reg_253) < $signed(tmp_130_cast_reg_629)) ? 1'b1 : 1'b0);

assign tmp_87_fu_459_p2 = (tmp_fu_447_p2 - tmp_62_fu_453_p2);

assign tmp_88_fu_471_p2 = (tmp1_fu_465_p2 + tmp_134_cast_reg_652);

assign tmp_89_fu_514_p1 = $signed(tmp_88_reg_673);

assign tmp_90_fu_493_p2 = (tmp3_reg_665 + tmp2_fu_487_p2);

assign tmp_91_fu_527_p2 = (tmp_66_fu_522_p2 + phi_mul3_cast_reg_569);

assign tmp_fu_447_p2 = p_y_assign_7_reg_253 << 32'd4;

assign tmp_s_fu_318_p2 = (v_3_reg_149 + 4'd5);

assign v_5_cast1_fu_302_p1 = v_3_reg_149;

assign v_5_cast_fu_298_p1 = v_3_reg_149;

assign v_fu_508_p2 = (p_x_assign_6_reg_231 + 32'd1);

always @ (posedge ap_clk) begin
    phi_mul3_cast_reg_569[12] <= 1'b0;
    v_5_cast1_reg_592[31:4] <= 28'b0000000000000000000000000000;
    tmp_128_cast_reg_605[31:4] <= 28'b0000000000000000000000000000;
    ho_3_cast8_reg_615[31:4] <= 28'b0000000000000000000000000000;
    tmp_130_cast_reg_629[31:4] <= 28'b0000000000000000000000000000;
    tmp_134_cast_reg_652[31:11] <= 21'b000000000000000000000;
    tmp_135_cast_reg_657[31:8] <= 24'b000000000000000000000000;
end

endmodule //forward_conv_1
