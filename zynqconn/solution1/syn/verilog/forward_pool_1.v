// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module forward_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pool_layer_2_2_1_10_10_16_input_data_V_address0,
        pool_layer_2_2_1_10_10_16_input_data_V_ce0,
        pool_layer_2_2_1_10_10_16_input_data_V_q0,
        pool_layer_2_2_1_10_10_16_output_data_V_address0,
        pool_layer_2_2_1_10_10_16_output_data_V_ce0,
        pool_layer_2_2_1_10_10_16_output_data_V_we0,
        pool_layer_2_2_1_10_10_16_output_data_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] pool_layer_2_2_1_10_10_16_input_data_V_address0;
output   pool_layer_2_2_1_10_10_16_input_data_V_ce0;
input  [15:0] pool_layer_2_2_1_10_10_16_input_data_V_q0;
output  [8:0] pool_layer_2_2_1_10_10_16_output_data_V_address0;
output   pool_layer_2_2_1_10_10_16_output_data_V_ce0;
output   pool_layer_2_2_1_10_10_16_output_data_V_we0;
output  [15:0] pool_layer_2_2_1_10_10_16_output_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pool_layer_2_2_1_10_10_16_input_data_V_ce0;
reg pool_layer_2_2_1_10_10_16_output_data_V_ce0;
reg pool_layer_2_2_1_10_10_16_output_data_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] p_x_assign_cast7_fu_187_p1;
reg   [8:0] p_x_assign_cast7_reg_450;
wire    ap_CS_fsm_state2;
wire   [2:0] o_y_fu_197_p2;
reg   [2:0] o_y_reg_458;
wire   [31:0] p_x_assign_5_cast_fu_211_p1;
reg   [31:0] p_x_assign_5_cast_reg_463;
wire   [0:0] exitcond2_fu_191_p2;
wire   [31:0] tmp_23_cast_fu_221_p1;
reg   [31:0] tmp_23_cast_reg_468;
wire   [2:0] o_x_fu_235_p2;
reg   [2:0] o_x_reg_476;
wire    ap_CS_fsm_state3;
wire   [31:0] h_3_cast_fu_249_p1;
reg   [31:0] h_3_cast_reg_481;
wire   [0:0] exitcond1_fu_229_p2;
wire   [31:0] tmp_24_cast_fu_267_p1;
reg   [31:0] tmp_24_cast_reg_486;
wire   [8:0] tmp2_cast_fu_277_p1;
reg   [8:0] tmp2_cast_reg_491;
wire   [10:0] next_mul2_fu_281_p2;
reg   [10:0] next_mul2_reg_496;
wire    ap_CS_fsm_state4;
wire   [8:0] next_mul_fu_287_p2;
reg   [8:0] next_mul_reg_501;
wire   [4:0] ch_fu_299_p2;
reg   [4:0] ch_reg_509;
wire   [31:0] tmp_cast8_fu_305_p1;
reg   [31:0] tmp_cast8_reg_514;
wire   [0:0] exitcond_fu_293_p2;
wire   [31:0] tmp1_fu_314_p2;
reg   [31:0] tmp1_reg_522;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_23_fu_309_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_36_fu_399_p2;
wire   [31:0] h_fu_432_p2;
reg   [31:0] h_reg_535;
wire   [31:0] v_1_fu_438_p2;
wire   [15:0] avg_V_fu_444_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] p_x_assign_reg_88;
reg   [2:0] p_y_assign_3_reg_99;
reg   [4:0] p_z_assign_reg_110;
reg   [8:0] phi_mul_reg_121;
reg   [10:0] phi_mul1_reg_133;
reg  signed [15:0] t_V_reg_144;
reg   [31:0] p_x_assign_3_reg_156;
reg   [15:0] p_Val2_s_reg_166;
reg   [31:0] p_y_assign_4_reg_178;
wire   [63:0] tmp_31_fu_329_p1;
wire  signed [63:0] tmp_38_fu_427_p1;
wire   [3:0] v_fu_203_p3;
wire   [3:0] tmp_21_fu_215_p2;
wire   [3:0] h_1_fu_241_p3;
wire   [3:0] tmp_22_fu_261_p2;
wire   [4:0] p_y_assign_3_cast6_fu_225_p1;
wire   [4:0] p_shl5_fu_253_p3;
wire   [4:0] tmp2_fu_271_p2;
wire   [8:0] tmp3_fu_319_p2;
wire   [8:0] tmp_29_fu_324_p2;
wire  signed [16:0] tmp_51_tr_fu_334_p1;
wire   [16:0] p_neg_fu_346_p2;
wire   [14:0] tmp_s_fu_352_p4;
wire   [13:0] tmp_30_fu_366_p4;
wire   [15:0] tmp_27_fu_362_p1;
wire  signed [14:0] tmp_32_fu_376_p1;
wire   [0:0] tmp_56_fu_338_p3;
wire   [15:0] tmp_33_fu_380_p2;
wire   [15:0] tmp_34_fu_386_p1;
wire   [31:0] tmp_57_fu_404_p2;
wire   [31:0] tmp_58_fu_410_p2;
wire   [31:0] tmp_fu_416_p2;
wire   [31:0] tmp_37_fu_422_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_s_reg_166 <= t_V_reg_144;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_s_reg_166 <= avg_V_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_x_assign_3_reg_156 <= v_1_fu_438_p2;
    end else if (((exitcond_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_x_assign_3_reg_156 <= p_x_assign_5_cast_reg_463;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_x_assign_reg_88 <= o_y_reg_458;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_x_assign_reg_88 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_y_assign_3_reg_99 <= o_x_reg_476;
    end else if (((exitcond2_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_y_assign_3_reg_99 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_y_assign_4_reg_178 <= h_3_cast_reg_481;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_y_assign_4_reg_178 <= h_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_z_assign_reg_110 <= ch_reg_509;
    end else if (((exitcond1_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_z_assign_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul1_reg_133 <= next_mul2_reg_496;
    end else if (((exitcond1_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_133 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_121 <= next_mul_reg_501;
    end else if (((exitcond1_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_121 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        t_V_reg_144 <= p_Val2_s_reg_166;
    end else if (((exitcond_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_reg_144 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ch_reg_509 <= ch_fu_299_p2;
        next_mul2_reg_496 <= next_mul2_fu_281_p2;
        next_mul_reg_501 <= next_mul_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        h_3_cast_reg_481[3 : 1] <= h_3_cast_fu_249_p1[3 : 1];
        tmp2_cast_reg_491[4 : 0] <= tmp2_cast_fu_277_p1[4 : 0];
        tmp_24_cast_reg_486[3 : 1] <= tmp_24_cast_fu_267_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_36_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        h_reg_535 <= h_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        o_x_reg_476 <= o_x_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_y_reg_458 <= o_y_fu_197_p2;
        p_x_assign_cast7_reg_450[2 : 0] <= p_x_assign_cast7_fu_187_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_x_assign_5_cast_reg_463[3 : 1] <= p_x_assign_5_cast_fu_211_p1[3 : 1];
        tmp_23_cast_reg_468[3 : 1] <= tmp_23_cast_fu_221_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_309_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp1_reg_522 <= tmp1_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_cast8_reg_514[10 : 0] <= tmp_cast8_fu_305_p1[10 : 0];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        pool_layer_2_2_1_10_10_16_input_data_V_ce0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_input_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pool_layer_2_2_1_10_10_16_output_data_V_ce0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_23_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        pool_layer_2_2_1_10_10_16_output_data_V_we0 = 1'b1;
    end else begin
        pool_layer_2_2_1_10_10_16_output_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_23_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_36_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign avg_V_fu_444_p2 = (pool_layer_2_2_1_10_10_16_input_data_V_q0 + p_Val2_s_reg_166);

assign ch_fu_299_p2 = (p_z_assign_reg_110 + 5'd1);

assign exitcond1_fu_229_p2 = ((p_y_assign_3_reg_99 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_191_p2 = ((p_x_assign_reg_88 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_293_p2 = ((p_z_assign_reg_110 == 5'd16) ? 1'b1 : 1'b0);

assign h_1_fu_241_p3 = {{p_y_assign_3_reg_99}, {1'd0}};

assign h_3_cast_fu_249_p1 = h_1_fu_241_p3;

assign h_fu_432_p2 = (32'd1 + p_y_assign_4_reg_178);

assign next_mul2_fu_281_p2 = (phi_mul1_reg_133 + 11'd100);

assign next_mul_fu_287_p2 = (phi_mul_reg_121 + 9'd25);

assign o_x_fu_235_p2 = (p_y_assign_3_reg_99 + 3'd1);

assign o_y_fu_197_p2 = (p_x_assign_reg_88 + 3'd1);

assign p_neg_fu_346_p2 = ($signed(17'd0) - $signed(tmp_51_tr_fu_334_p1));

assign p_shl5_fu_253_p3 = {{p_y_assign_3_reg_99}, {2'd0}};

assign p_x_assign_5_cast_fu_211_p1 = v_fu_203_p3;

assign p_x_assign_cast7_fu_187_p1 = p_x_assign_reg_88;

assign p_y_assign_3_cast6_fu_225_p1 = p_y_assign_3_reg_99;

assign pool_layer_2_2_1_10_10_16_input_data_V_address0 = tmp_38_fu_427_p1;

assign pool_layer_2_2_1_10_10_16_output_data_V_address0 = tmp_31_fu_329_p1;

assign pool_layer_2_2_1_10_10_16_output_data_V_d0 = ((tmp_56_fu_338_p3[0:0] === 1'b1) ? tmp_33_fu_380_p2 : tmp_34_fu_386_p1);

assign tmp1_fu_314_p2 = (p_x_assign_3_reg_156 + tmp_cast8_reg_514);

assign tmp2_cast_fu_277_p1 = tmp2_fu_271_p2;

assign tmp2_fu_271_p2 = (p_y_assign_3_cast6_fu_225_p1 + p_shl5_fu_253_p3);

assign tmp3_fu_319_p2 = (p_x_assign_cast7_reg_450 + phi_mul_reg_121);

assign tmp_21_fu_215_p2 = (v_fu_203_p3 + 4'd2);

assign tmp_22_fu_261_p2 = (h_1_fu_241_p3 + 4'd2);

assign tmp_23_cast_fu_221_p1 = tmp_21_fu_215_p2;

assign tmp_23_fu_309_p2 = (($signed(p_x_assign_3_reg_156) < $signed(tmp_23_cast_reg_468)) ? 1'b1 : 1'b0);

assign tmp_24_cast_fu_267_p1 = tmp_22_fu_261_p2;

assign tmp_27_fu_362_p1 = tmp_s_fu_352_p4;

assign tmp_29_fu_324_p2 = (tmp3_fu_319_p2 + tmp2_cast_reg_491);

assign tmp_30_fu_366_p4 = {{t_V_reg_144[15:2]}};

assign tmp_31_fu_329_p1 = tmp_29_fu_324_p2;

assign tmp_32_fu_376_p1 = $signed(tmp_30_fu_366_p4);

assign tmp_33_fu_380_p2 = (16'd0 - tmp_27_fu_362_p1);

assign tmp_34_fu_386_p1 = $unsigned(tmp_32_fu_376_p1);

assign tmp_36_fu_399_p2 = (($signed(p_y_assign_4_reg_178) < $signed(tmp_24_cast_reg_486)) ? 1'b1 : 1'b0);

assign tmp_37_fu_422_p2 = (tmp1_reg_522 + tmp_fu_416_p2);

assign tmp_38_fu_427_p1 = $signed(tmp_37_fu_422_p2);

assign tmp_51_tr_fu_334_p1 = t_V_reg_144;

assign tmp_56_fu_338_p3 = t_V_reg_144[32'd15];

assign tmp_57_fu_404_p2 = p_y_assign_4_reg_178 << 32'd3;

assign tmp_58_fu_410_p2 = p_y_assign_4_reg_178 << 32'd1;

assign tmp_cast8_fu_305_p1 = phi_mul1_reg_133;

assign tmp_fu_416_p2 = (tmp_57_fu_404_p2 + tmp_58_fu_410_p2);

assign tmp_s_fu_352_p4 = {{p_neg_fu_346_p2[16:2]}};

assign v_1_fu_438_p2 = (p_x_assign_3_reg_156 + 32'd1);

assign v_fu_203_p3 = {{p_x_assign_reg_88}, {1'd0}};

always @ (posedge ap_clk) begin
    p_x_assign_cast7_reg_450[8:3] <= 6'b000000;
    p_x_assign_5_cast_reg_463[0] <= 1'b0;
    p_x_assign_5_cast_reg_463[31:4] <= 28'b0000000000000000000000000000;
    tmp_23_cast_reg_468[0] <= 1'b0;
    tmp_23_cast_reg_468[31:4] <= 28'b0000000000000000000000000000;
    h_3_cast_reg_481[0] <= 1'b0;
    h_3_cast_reg_481[31:4] <= 28'b0000000000000000000000000000;
    tmp_24_cast_reg_486[0] <= 1'b0;
    tmp_24_cast_reg_486[31:4] <= 28'b0000000000000000000000000000;
    tmp2_cast_reg_491[8:5] <= 4'b0000;
    tmp_cast8_reg_514[31:11] <= 21'b000000000000000000000;
end

endmodule //forward_pool_1
