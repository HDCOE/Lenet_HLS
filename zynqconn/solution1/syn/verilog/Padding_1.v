// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Padding_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        in_V_address0,
        in_V_ce0,
        in_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [15:0] out_V_d0;
output  [10:0] in_V_address0;
output   in_V_ce0;
input  [15:0] in_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_V_ce0;
reg out_V_we0;
reg in_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] phi_mul_cast_fu_165_p1;
reg   [11:0] phi_mul_cast_reg_302;
wire    ap_CS_fsm_state2;
wire   [10:0] next_mul_fu_169_p2;
reg   [10:0] next_mul_reg_307;
wire   [2:0] z_1_fu_181_p2;
reg   [2:0] z_1_reg_315;
wire   [10:0] idx_5_fu_187_p2;
reg   [10:0] idx_5_reg_320;
wire   [0:0] exitcond5_fu_175_p2;
wire   [3:0] y_1_fu_199_p2;
reg   [3:0] y_1_reg_328;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_s_fu_229_p2;
reg   [8:0] tmp_s_reg_333;
wire   [0:0] exitcond4_fu_193_p2;
wire   [10:0] tmp_52_fu_235_p2;
reg   [10:0] tmp_52_reg_338;
wire   [10:0] indvars_iv_next_fu_241_p2;
wire   [3:0] x_1_fu_257_p2;
reg   [3:0] x_1_reg_351;
wire    ap_CS_fsm_state4;
wire   [11:0] tmp_105_fu_272_p2;
reg   [11:0] tmp_105_reg_356;
wire   [0:0] exitcond_fu_251_p2;
wire   [10:0] idx_4_fu_282_p2;
reg   [10:0] idx_4_reg_366;
wire   [10:0] indvars_iv_next3_fu_288_p2;
reg   [10:0] indvars_iv_reg_65;
reg   [10:0] idx_reg_77;
reg   [2:0] z_reg_89;
reg   [10:0] phi_mul_reg_100;
reg   [10:0] indvars_iv2_reg_111;
reg   [10:0] idx_1_reg_122;
reg   [3:0] y_reg_133;
reg   [10:0] idx_2_reg_144;
wire    ap_CS_fsm_state5;
reg   [3:0] x_reg_154;
wire   [63:0] tmp_107_fu_277_p1;
wire   [63:0] tmp_106_fu_297_p1;
wire   [7:0] p_shl_fu_205_p3;
wire   [4:0] p_shl1_fu_217_p3;
wire   [8:0] p_shl_cast_fu_213_p1;
wire   [8:0] p_shl1_cast_fu_225_p1;
wire   [8:0] x_cast_fu_247_p1;
wire   [8:0] tmp_fu_263_p2;
wire  signed [11:0] tmp_cast_fu_268_p1;
wire  signed [31:0] tmp_169_cast_fu_294_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_1_reg_122 <= idx_reg_77;
    end else if (((exitcond_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_1_reg_122 <= tmp_52_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_2_reg_144 <= idx_1_reg_122;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        idx_2_reg_144 <= idx_4_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_reg_77 <= 11'd0;
    end else if (((exitcond4_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_reg_77 <= idx_5_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv2_reg_111 <= indvars_iv_reg_65;
    end else if (((exitcond_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        indvars_iv2_reg_111 <= indvars_iv_next3_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_65 <= 11'd14;
    end else if (((exitcond4_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv_reg_65 <= indvars_iv_next_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_100 <= 11'd0;
    end else if (((exitcond4_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_100 <= next_mul_reg_307;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_reg_154 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_reg_154 <= x_1_reg_351;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_133 <= 4'd0;
    end else if (((exitcond_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_reg_133 <= y_1_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        z_reg_89 <= 3'd0;
    end else if (((exitcond4_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        z_reg_89 <= z_1_reg_315;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        idx_4_reg_366 <= idx_4_fu_282_p2;
        tmp_105_reg_356 <= tmp_105_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_5_reg_320 <= idx_5_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_307 <= next_mul_fu_169_p2;
        phi_mul_cast_reg_302[10 : 0] <= phi_mul_cast_fu_165_p1[10 : 0];
        z_1_reg_315 <= z_1_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_52_reg_338 <= tmp_52_fu_235_p2;
        tmp_s_reg_333[8 : 1] <= tmp_s_fu_229_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_1_reg_351 <= x_1_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_1_reg_328 <= y_1_fu_199_p2;
    end
end

always @ (*) begin
    if ((((exitcond5_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond4_fu_193_p2 = ((y_reg_133 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond5_fu_175_p2 = ((z_reg_89 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_251_p2 = ((idx_2_reg_144 == indvars_iv2_reg_111) ? 1'b1 : 1'b0);

assign idx_4_fu_282_p2 = (idx_2_reg_144 + 11'd1);

assign idx_5_fu_187_p2 = (idx_reg_77 + 11'd196);

assign in_V_address0 = tmp_107_fu_277_p1;

assign indvars_iv_next3_fu_288_p2 = (indvars_iv2_reg_111 + 11'd14);

assign indvars_iv_next_fu_241_p2 = (indvars_iv_reg_65 + 11'd196);

assign next_mul_fu_169_p2 = (phi_mul_reg_100 + 11'd196);

assign out_V_address0 = tmp_106_fu_297_p1;

assign out_V_d0 = in_V_q0;

assign p_shl1_cast_fu_225_p1 = p_shl1_fu_217_p3;

assign p_shl1_fu_217_p3 = {{y_reg_133}, {1'd0}};

assign p_shl_cast_fu_213_p1 = p_shl_fu_205_p3;

assign p_shl_fu_205_p3 = {{y_reg_133}, {4'd0}};

assign phi_mul_cast_fu_165_p1 = phi_mul_reg_100;

assign tmp_105_fu_272_p2 = ($signed(tmp_cast_fu_268_p1) + $signed(phi_mul_cast_reg_302));

assign tmp_106_fu_297_p1 = $unsigned(tmp_169_cast_fu_294_p1);

assign tmp_107_fu_277_p1 = idx_2_reg_144;

assign tmp_169_cast_fu_294_p1 = $signed(tmp_105_reg_356);

assign tmp_52_fu_235_p2 = (idx_1_reg_122 + 11'd14);

assign tmp_cast_fu_268_p1 = $signed(tmp_fu_263_p2);

assign tmp_fu_263_p2 = (tmp_s_reg_333 + x_cast_fu_247_p1);

assign tmp_s_fu_229_p2 = (p_shl_cast_fu_213_p1 - p_shl1_cast_fu_225_p1);

assign x_1_fu_257_p2 = (x_reg_154 + 4'd1);

assign x_cast_fu_247_p1 = x_reg_154;

assign y_1_fu_199_p2 = (y_reg_133 + 4'd1);

assign z_1_fu_181_p2 = (z_reg_89 + 3'd1);

always @ (posedge ap_clk) begin
    phi_mul_cast_reg_302[11] <= 1'b0;
    tmp_s_reg_333[0] <= 1'b0;
end

endmodule //Padding_1
